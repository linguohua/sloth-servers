// Code generated by protoc-gen-go. DO NOT EDIT.
// source: lobby_club_enum.proto

/*
Package club is a generated protocol buffer package.

It is generated from these files:
	lobby_club_enum.proto

It has these top-level messages:
*/
package club

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ClubReplyCode int32

const (
	ClubReplyCode_RCNone      ClubReplyCode = 0
	ClubReplyCode_RCError     ClubReplyCode = 1
	ClubReplyCode_RCOperation ClubReplyCode = 2
)

var ClubReplyCode_name = map[int32]string{
	0: "RCNone",
	1: "RCError",
	2: "RCOperation",
}
var ClubReplyCode_value = map[string]int32{
	"RCNone":      0,
	"RCError":     1,
	"RCOperation": 2,
}

func (x ClubReplyCode) Enum() *ClubReplyCode {
	p := new(ClubReplyCode)
	*p = x
	return p
}
func (x ClubReplyCode) String() string {
	return proto.EnumName(ClubReplyCode_name, int32(x))
}
func (x *ClubReplyCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ClubReplyCode_value, data, "ClubReplyCode")
	if err != nil {
		return err
	}
	*x = ClubReplyCode(value)
	return nil
}
func (ClubReplyCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// 俱乐部角色定义
type ClubRoleType int32

const (
	ClubRoleType_CRoleTypeNone    ClubRoleType = 0
	ClubRoleType_CRoleTypeMember  ClubRoleType = 1
	ClubRoleType_CRoleTypeCreator ClubRoleType = 2
	// CRoleTypeOwner = 4; // 拥有者
	ClubRoleType_CRoleTypeMgr ClubRoleType = 3
)

var ClubRoleType_name = map[int32]string{
	0: "CRoleTypeNone",
	1: "CRoleTypeMember",
	2: "CRoleTypeCreator",
	3: "CRoleTypeMgr",
}
var ClubRoleType_value = map[string]int32{
	"CRoleTypeNone":    0,
	"CRoleTypeMember":  1,
	"CRoleTypeCreator": 2,
	"CRoleTypeMgr":     3,
}

func (x ClubRoleType) Enum() *ClubRoleType {
	p := new(ClubRoleType)
	*p = x
	return p
}
func (x ClubRoleType) String() string {
	return proto.EnumName(ClubRoleType_name, int32(x))
}
func (x *ClubRoleType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ClubRoleType_value, data, "ClubRoleType")
	if err != nil {
		return err
	}
	*x = ClubRoleType(value)
	return nil
}
func (ClubRoleType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ClubOperError int32

const (
	ClubOperError_CERR_OK                                       ClubOperError = 0
	ClubOperError_CERR_Exceed_Max_Club_Count_Limit              ClubOperError = 1
	ClubOperError_CERR_No_Valid_Club_Number                     ClubOperError = 2
	ClubOperError_CERR_Database_IO                              ClubOperError = 3
	ClubOperError_CERR_Encode_Decode                            ClubOperError = 4
	ClubOperError_CERR_Invalid_Input_Parameter                  ClubOperError = 5
	ClubOperError_CERR_Only_Creator_Can_KickOut                 ClubOperError = 6
	ClubOperError_CERR_You_Already_In_Club                      ClubOperError = 7
	ClubOperError_CERR_You_Are_In_Club_Block_List               ClubOperError = 8
	ClubOperError_CERR_You_Already_Applicate                    ClubOperError = 9
	ClubOperError_CERR_Invitee_Already_In_Club                  ClubOperError = 10
	ClubOperError_CERR_Invitee_Are_In_Club_Block_List           ClubOperError = 11
	ClubOperError_CERR_Invitee_Already_Applicate                ClubOperError = 12
	ClubOperError_CERR_Club_Not_Exist                           ClubOperError = 13
	ClubOperError_CERR_Only_Creator_Can_Invite                  ClubOperError = 14
	ClubOperError_CERR_Only_Creator_Can_Approve                 ClubOperError = 15
	ClubOperError_CERR_No_Applicant                             ClubOperError = 16
	ClubOperError_CERR_Applicant_Already_In_Club                ClubOperError = 17
	ClubOperError_CERR_Applicant_In_Club_Block_List             ClubOperError = 18
	ClubOperError_CERR_Token_Invalid                            ClubOperError = 19
	ClubOperError_CERR_Club_Name_Too_Long                       ClubOperError = 20
	ClubOperError_CERR_Club_Name_Exist                          ClubOperError = 21
	ClubOperError_CERR_Club_Only_Owner_Can_Disband              ClubOperError = 22
	ClubOperError_CERR_Owner_Can_not_quit                       ClubOperError = 23
	ClubOperError_CERR_User_Not_In_Club                         ClubOperError = 24
	ClubOperError_CERR_Club_Only_Owner_Can_Set                  ClubOperError = 25
	ClubOperError_CERR_Club_Forbit_Join                         ClubOperError = 26
	ClubOperError_CERR_Input_Text_Too_Long                      ClubOperError = 27
	ClubOperError_CERR_Club_Has_Room_In_PlayingState            ClubOperError = 28
	ClubOperError_CERR_Only_Creator_Or_Manager_Can_Create_roome ClubOperError = 29
)

var ClubOperError_name = map[int32]string{
	0:  "CERR_OK",
	1:  "CERR_Exceed_Max_Club_Count_Limit",
	2:  "CERR_No_Valid_Club_Number",
	3:  "CERR_Database_IO",
	4:  "CERR_Encode_Decode",
	5:  "CERR_Invalid_Input_Parameter",
	6:  "CERR_Only_Creator_Can_KickOut",
	7:  "CERR_You_Already_In_Club",
	8:  "CERR_You_Are_In_Club_Block_List",
	9:  "CERR_You_Already_Applicate",
	10: "CERR_Invitee_Already_In_Club",
	11: "CERR_Invitee_Are_In_Club_Block_List",
	12: "CERR_Invitee_Already_Applicate",
	13: "CERR_Club_Not_Exist",
	14: "CERR_Only_Creator_Can_Invite",
	15: "CERR_Only_Creator_Can_Approve",
	16: "CERR_No_Applicant",
	17: "CERR_Applicant_Already_In_Club",
	18: "CERR_Applicant_In_Club_Block_List",
	19: "CERR_Token_Invalid",
	20: "CERR_Club_Name_Too_Long",
	21: "CERR_Club_Name_Exist",
	22: "CERR_Club_Only_Owner_Can_Disband",
	23: "CERR_Owner_Can_not_quit",
	24: "CERR_User_Not_In_Club",
	25: "CERR_Club_Only_Owner_Can_Set",
	26: "CERR_Club_Forbit_Join",
	27: "CERR_Input_Text_Too_Long",
	28: "CERR_Club_Has_Room_In_PlayingState",
	29: "CERR_Only_Creator_Or_Manager_Can_Create_roome",
}
var ClubOperError_value = map[string]int32{
	"CERR_OK":                                       0,
	"CERR_Exceed_Max_Club_Count_Limit":              1,
	"CERR_No_Valid_Club_Number":                     2,
	"CERR_Database_IO":                              3,
	"CERR_Encode_Decode":                            4,
	"CERR_Invalid_Input_Parameter":                  5,
	"CERR_Only_Creator_Can_KickOut":                 6,
	"CERR_You_Already_In_Club":                      7,
	"CERR_You_Are_In_Club_Block_List":               8,
	"CERR_You_Already_Applicate":                    9,
	"CERR_Invitee_Already_In_Club":                  10,
	"CERR_Invitee_Are_In_Club_Block_List":           11,
	"CERR_Invitee_Already_Applicate":                12,
	"CERR_Club_Not_Exist":                           13,
	"CERR_Only_Creator_Can_Invite":                  14,
	"CERR_Only_Creator_Can_Approve":                 15,
	"CERR_No_Applicant":                             16,
	"CERR_Applicant_Already_In_Club":                17,
	"CERR_Applicant_In_Club_Block_List":             18,
	"CERR_Token_Invalid":                            19,
	"CERR_Club_Name_Too_Long":                       20,
	"CERR_Club_Name_Exist":                          21,
	"CERR_Club_Only_Owner_Can_Disband":              22,
	"CERR_Owner_Can_not_quit":                       23,
	"CERR_User_Not_In_Club":                         24,
	"CERR_Club_Only_Owner_Can_Set":                  25,
	"CERR_Club_Forbit_Join":                         26,
	"CERR_Input_Text_Too_Long":                      27,
	"CERR_Club_Has_Room_In_PlayingState":            28,
	"CERR_Only_Creator_Or_Manager_Can_Create_roome": 29,
}

func (x ClubOperError) Enum() *ClubOperError {
	p := new(ClubOperError)
	*p = x
	return p
}
func (x ClubOperError) String() string {
	return proto.EnumName(ClubOperError_name, int32(x))
}
func (x *ClubOperError) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ClubOperError_value, data, "ClubOperError")
	if err != nil {
		return err
	}
	*x = ClubOperError(value)
	return nil
}
func (ClubOperError) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ClubEventType int32

const (
	ClubEventType_CEVT_None         ClubEventType = 0
	ClubEventType_CEVT_ClubDisband  ClubEventType = 1
	ClubEventType_CEVT_NewApplicant ClubEventType = 2
	ClubEventType_CEVT_Approval     ClubEventType = 3
	ClubEventType_CEVT_Deny         ClubEventType = 4
	ClubEventType_CEVT_Join         ClubEventType = 5
	ClubEventType_CEVT_Quit         ClubEventType = 6
	ClubEventType_CEVT_Kickout      ClubEventType = 7
)

var ClubEventType_name = map[int32]string{
	0: "CEVT_None",
	1: "CEVT_ClubDisband",
	2: "CEVT_NewApplicant",
	3: "CEVT_Approval",
	4: "CEVT_Deny",
	5: "CEVT_Join",
	6: "CEVT_Quit",
	7: "CEVT_Kickout",
}
var ClubEventType_value = map[string]int32{
	"CEVT_None":         0,
	"CEVT_ClubDisband":  1,
	"CEVT_NewApplicant": 2,
	"CEVT_Approval":     3,
	"CEVT_Deny":         4,
	"CEVT_Join":         5,
	"CEVT_Quit":         6,
	"CEVT_Kickout":      7,
}

func (x ClubEventType) Enum() *ClubEventType {
	p := new(ClubEventType)
	*p = x
	return p
}
func (x ClubEventType) String() string {
	return proto.EnumName(ClubEventType_name, int32(x))
}
func (x *ClubEventType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ClubEventType_value, data, "ClubEventType")
	if err != nil {
		return err
	}
	*x = ClubEventType(value)
	return nil
}
func (ClubEventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ClubFundEventType int32

const (
	ClubFundEventType_CFET_None            ClubFundEventType = 0
	ClubFundEventType_CFET_Add_By_Shop     ClubFundEventType = 1
	ClubFundEventType_CFET_Award_By_System ClubFundEventType = 3
	ClubFundEventType_CFET_Gift_By_System  ClubFundEventType = 4
	ClubFundEventType_CFET_Reduce_By_Room  ClubFundEventType = 5
	ClubFundEventType_CFET_Add_By_Room     ClubFundEventType = 6
)

var ClubFundEventType_name = map[int32]string{
	0: "CFET_None",
	1: "CFET_Add_By_Shop",
	3: "CFET_Award_By_System",
	4: "CFET_Gift_By_System",
	5: "CFET_Reduce_By_Room",
	6: "CFET_Add_By_Room",
}
var ClubFundEventType_value = map[string]int32{
	"CFET_None":            0,
	"CFET_Add_By_Shop":     1,
	"CFET_Award_By_System": 3,
	"CFET_Gift_By_System":  4,
	"CFET_Reduce_By_Room":  5,
	"CFET_Add_By_Room":     6,
}

func (x ClubFundEventType) Enum() *ClubFundEventType {
	p := new(ClubFundEventType)
	*p = x
	return p
}
func (x ClubFundEventType) String() string {
	return proto.EnumName(ClubFundEventType_name, int32(x))
}
func (x *ClubFundEventType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ClubFundEventType_value, data, "ClubFundEventType")
	if err != nil {
		return err
	}
	*x = ClubFundEventType(value)
	return nil
}
func (ClubFundEventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterEnum("club.ClubReplyCode", ClubReplyCode_name, ClubReplyCode_value)
	proto.RegisterEnum("club.ClubRoleType", ClubRoleType_name, ClubRoleType_value)
	proto.RegisterEnum("club.ClubOperError", ClubOperError_name, ClubOperError_value)
	proto.RegisterEnum("club.ClubEventType", ClubEventType_name, ClubEventType_value)
	proto.RegisterEnum("club.ClubFundEventType", ClubFundEventType_name, ClubFundEventType_value)
}

func init() { proto.RegisterFile("lobby_club_enum.proto", fileDescriptor0) }

var fileDescriptor1 = []byte{
	// 742 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0xdb, 0x6e, 0xe3, 0x36,
	0x10, 0x5d, 0x5f, 0x62, 0x77, 0x27, 0x71, 0x33, 0x66, 0xe2, 0x4d, 0xb2, 0x9b, 0x6c, 0x77, 0x37,
	0xbd, 0x00, 0x06, 0x5a, 0xa0, 0x8f, 0x7d, 0x74, 0x64, 0xa7, 0x75, 0x73, 0x71, 0xaa, 0xb8, 0x01,
	0xfa, 0x52, 0x82, 0xb2, 0xa6, 0xae, 0x10, 0x89, 0x54, 0x69, 0x2a, 0xb1, 0x7e, 0xa5, 0x40, 0x3f,
	0xa8, 0x7f, 0x55, 0x90, 0xb2, 0xe5, 0x24, 0x76, 0x9f, 0x84, 0x99, 0x33, 0x3a, 0x73, 0xce, 0x0c,
	0x49, 0xe8, 0xc4, 0x2a, 0x08, 0x72, 0x3e, 0x89, 0xb3, 0x80, 0x93, 0xcc, 0x92, 0xef, 0x52, 0xad,
	0x8c, 0x62, 0x75, 0x9b, 0xe8, 0xfe, 0x00, 0x2d, 0x2f, 0xce, 0x02, 0x9f, 0xd2, 0x38, 0xf7, 0x54,
	0x48, 0x0c, 0xa0, 0xe1, 0x7b, 0xd7, 0x4a, 0x12, 0xbe, 0x62, 0xdb, 0xd0, 0xf4, 0xbd, 0x81, 0xd6,
	0x4a, 0x63, 0x85, 0xed, 0xc2, 0xb6, 0xef, 0x8d, 0x52, 0xd2, 0xc2, 0x44, 0x4a, 0x62, 0xb5, 0xfb,
	0x3b, 0xec, 0xb8, 0x5f, 0x55, 0x4c, 0xe3, 0x3c, 0x25, 0xd6, 0x86, 0x96, 0xb7, 0x0c, 0x16, 0x04,
	0x7b, 0xb0, 0x5b, 0xa6, 0xae, 0x28, 0x09, 0xc8, 0x12, 0xed, 0x03, 0x96, 0x49, 0x4f, 0x93, 0x30,
	0x4a, 0x63, 0x95, 0x21, 0xec, 0xac, 0x4a, 0xa7, 0x1a, 0x6b, 0xdd, 0x7f, 0x9b, 0x85, 0x36, 0xdb,
	0xd3, 0x89, 0xb0, 0x7a, 0xbc, 0x81, 0xef, 0xf3, 0xd1, 0x05, 0xbe, 0x62, 0x5f, 0xc2, 0x07, 0x17,
	0x0c, 0xe6, 0x13, 0xa2, 0x90, 0x5f, 0x89, 0x39, 0xb7, 0xd5, 0xdc, 0x53, 0x99, 0x34, 0xfc, 0x32,
	0x4a, 0x22, 0x83, 0x15, 0x76, 0x02, 0x47, 0xae, 0xea, 0x5a, 0xf1, 0x3b, 0x11, 0x47, 0x61, 0x51,
	0x73, 0x9d, 0x39, 0x2d, 0x55, 0xa7, 0xc5, 0xc2, 0x7d, 0x61, 0x44, 0x20, 0x66, 0xc4, 0x87, 0x23,
	0xac, 0xb1, 0x37, 0xc0, 0x0a, 0x6a, 0x39, 0x51, 0x21, 0xf1, 0x3e, 0xd9, 0x0f, 0xd6, 0xd9, 0x07,
	0x38, 0x76, 0xf9, 0xa1, 0x7c, 0x70, 0x5c, 0x43, 0x99, 0x66, 0x86, 0xdf, 0x08, 0x2d, 0x12, 0x32,
	0xa4, 0x71, 0x8b, 0x7d, 0x84, 0x93, 0x42, 0xa1, 0x8c, 0x73, 0xbe, 0x30, 0xc7, 0x3d, 0x21, 0xf9,
	0x45, 0x34, 0xb9, 0x1f, 0x65, 0x06, 0x1b, 0xec, 0x18, 0x0e, 0x5d, 0xc9, 0x6f, 0x2a, 0xe3, 0xbd,
	0x58, 0x93, 0x08, 0x73, 0x3e, 0x94, 0x4e, 0x17, 0x36, 0xd9, 0x29, 0x7c, 0xb1, 0x42, 0x35, 0x2d,
	0x11, 0x7e, 0x16, 0xab, 0xc9, 0x3d, 0xbf, 0x8c, 0x66, 0x06, 0x3f, 0x63, 0xef, 0xe1, 0xed, 0x1a,
	0x45, 0x2f, 0x4d, 0xe3, 0x68, 0x22, 0x0c, 0xe1, 0xeb, 0xa7, 0x3a, 0x23, 0x43, 0xb4, 0xd6, 0x06,
	0xd8, 0x37, 0x70, 0xfa, 0xbc, 0x62, 0x73, 0xab, 0x6d, 0xf6, 0x09, 0xde, 0x6f, 0xa4, 0x5a, 0xb5,
	0xdb, 0x61, 0x07, 0xb0, 0xe7, 0x6a, 0x8a, 0xd1, 0x2a, 0xc3, 0x07, 0x73, 0xfb, 0x73, 0xab, 0xd4,
	0xb1, 0x36, 0x8d, 0x82, 0x0d, 0x3f, 0xff, 0xff, 0x79, 0xf5, 0xd2, 0x54, 0xab, 0x07, 0xc2, 0x5d,
	0xd6, 0x81, 0xf6, 0x72, 0x83, 0x8b, 0xa6, 0xd2, 0x20, 0x96, 0xc2, 0xca, 0xdc, 0x9a, 0xcb, 0x36,
	0xfb, 0x0a, 0x3e, 0xbe, 0xa8, 0xd9, 0xe0, 0x91, 0x95, 0xeb, 0x1e, 0xab, 0x7b, 0x92, 0xcb, 0xe5,
	0xe2, 0x1e, 0x7b, 0x07, 0x07, 0x4f, 0x7c, 0x89, 0x84, 0xf8, 0x58, 0x29, 0x7e, 0xa9, 0xe4, 0x14,
	0xf7, 0xd9, 0x21, 0xec, 0xbf, 0x00, 0x0b, 0xd7, 0x9d, 0xf2, 0x60, 0x3a, 0xc4, 0x19, 0x1b, 0x3d,
	0x4a, 0x2a, 0x6c, 0xf5, 0xa3, 0x59, 0x20, 0x64, 0x88, 0x6f, 0x4a, 0xf2, 0x15, 0x26, 0x95, 0xe1,
	0x7f, 0x65, 0x91, 0xc1, 0x03, 0x76, 0x04, 0x1d, 0x07, 0xfe, 0x3a, 0x23, 0xed, 0x26, 0xba, 0xf4,
	0x74, 0x58, 0xce, 0x74, 0x13, 0xfb, 0x2d, 0x19, 0x3c, 0x2a, 0x7f, 0x76, 0x15, 0xe7, 0x4a, 0x07,
	0x91, 0xe1, 0x3f, 0xab, 0x48, 0xe2, 0xdb, 0xf2, 0xec, 0x15, 0x07, 0x77, 0x4c, 0x73, 0xb3, 0xb2,
	0xf4, 0x8e, 0x7d, 0x0d, 0x9f, 0x56, 0x3f, 0xfe, 0x24, 0x66, 0xdc, 0x57, 0x2a, 0xb1, 0xad, 0x6f,
	0x62, 0x91, 0x47, 0x72, 0x7a, 0x6b, 0xec, 0xbe, 0x8f, 0xd9, 0xf7, 0xf0, 0xed, 0xfa, 0xd2, 0x46,
	0x9a, 0x5f, 0x09, 0x29, 0xa6, 0x0b, 0x29, 0x2e, 0x4d, 0x5c, 0x2b, 0x95, 0x10, 0x9e, 0x74, 0xff,
	0xa9, 0x14, 0x77, 0x79, 0xf0, 0x40, 0xd2, 0xb8, 0xd7, 0xa2, 0x05, 0xaf, 0xbd, 0xc1, 0xdd, 0x98,
	0x2f, 0x5e, 0x0a, 0x77, 0x11, 0xef, 0xc6, 0xae, 0xf7, 0x72, 0x48, 0x95, 0x62, 0xf7, 0xb6, 0x88,
	0x1e, 0x57, 0xbb, 0xaf, 0xba, 0x97, 0xc6, 0xa6, 0x8b, 0x43, 0x22, 0x62, 0xac, 0x95, 0x74, 0x7d,
	0x92, 0x39, 0xd6, 0xcb, 0xd0, 0xf9, 0xde, 0x2a, 0xc3, 0x5f, 0xec, 0x78, 0x1b, 0xee, 0xad, 0xb1,
	0xa1, 0xbd, 0x94, 0x2a, 0x33, 0xd8, 0xec, 0xfe, 0x5d, 0x81, 0xb6, 0x6d, 0x7d, 0x9e, 0xc9, 0xf0,
	0xb9, 0xc6, 0xf3, 0xc1, 0x33, 0x8d, 0x36, 0xec, 0x85, 0x21, 0x3f, 0xcb, 0xf9, 0xed, 0x9f, 0x2a,
	0xc5, 0x8a, 0x3b, 0x08, 0x2e, 0xfb, 0x28, 0x74, 0x91, 0xcf, 0x67, 0x86, 0x12, 0xac, 0xb9, 0x7b,
	0x61, 0x91, 0x1f, 0xa3, 0x3f, 0xcc, 0x13, 0xa0, 0x5e, 0x02, 0x3e, 0x85, 0xd9, 0x84, 0x2c, 0x64,
	0x27, 0x8d, 0x5b, 0x2f, 0x3b, 0xb8, 0x6c, 0xe3, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x48, 0x2d,
	0x5c, 0x6b, 0xc1, 0x05, 0x00, 0x00,
}
