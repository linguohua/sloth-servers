// Code generated by protoc-gen-go. DO NOT EDIT.
// source: game_pokerface_rf.proto

package prunfast

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 牌组类型
type CardHandType int32

const (
	CardHandType_None           CardHandType = 0
	CardHandType_Flush          CardHandType = 1
	CardHandType_Bomb           CardHandType = 2
	CardHandType_Single         CardHandType = 3
	CardHandType_Pair           CardHandType = 4
	CardHandType_Pair2X         CardHandType = 5
	CardHandType_Triplet        CardHandType = 6
	CardHandType_TripletPair    CardHandType = 7
	CardHandType_Triplet2X      CardHandType = 8
	CardHandType_Triplet2X2Pair CardHandType = 9
)

var CardHandType_name = map[int32]string{
	0: "None",
	1: "Flush",
	2: "Bomb",
	3: "Single",
	4: "Pair",
	5: "Pair2X",
	6: "Triplet",
	7: "TripletPair",
	8: "Triplet2X",
	9: "Triplet2X2Pair",
}

var CardHandType_value = map[string]int32{
	"None":           0,
	"Flush":          1,
	"Bomb":           2,
	"Single":         3,
	"Pair":           4,
	"Pair2X":         5,
	"Triplet":        6,
	"TripletPair":    7,
	"Triplet2X":      8,
	"Triplet2X2Pair": 9,
}

func (x CardHandType) Enum() *CardHandType {
	p := new(CardHandType)
	*p = x
	return p
}

func (x CardHandType) String() string {
	return proto.EnumName(CardHandType_name, int32(x))
}

func (x *CardHandType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CardHandType_value, data, "CardHandType")
	if err != nil {
		return err
	}
	*x = CardHandType(value)
	return nil
}

func (CardHandType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6ac55348274f72c2, []int{0}
}

// 一手牌局结束
// 可能的结果是：流局、有人自摸胡牌、有人放铳其他人胡牌
type HandOverType int32

const (
	HandOverType_enumHandOverType_None          HandOverType = 0
	HandOverType_enumHandOverType_Win_SelfDrawn HandOverType = 1
	HandOverType_enumHandOverType_Win_Chuck     HandOverType = 2
	HandOverType_enumHandOverType_Chucker       HandOverType = 3
	HandOverType_enumHandOverType_Konger        HandOverType = 4
	HandOverType_enumHandOverType_Win_RobKong   HandOverType = 5
)

var HandOverType_name = map[int32]string{
	0: "enumHandOverType_None",
	1: "enumHandOverType_Win_SelfDrawn",
	2: "enumHandOverType_Win_Chuck",
	3: "enumHandOverType_Chucker",
	4: "enumHandOverType_Konger",
	5: "enumHandOverType_Win_RobKong",
}

var HandOverType_value = map[string]int32{
	"enumHandOverType_None":          0,
	"enumHandOverType_Win_SelfDrawn": 1,
	"enumHandOverType_Win_Chuck":     2,
	"enumHandOverType_Chucker":       3,
	"enumHandOverType_Konger":        4,
	"enumHandOverType_Win_RobKong":   5,
}

func (x HandOverType) Enum() *HandOverType {
	p := new(HandOverType)
	*p = x
	return p
}

func (x HandOverType) String() string {
	return proto.EnumName(HandOverType_name, int32(x))
}

func (x *HandOverType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HandOverType_value, data, "HandOverType")
	if err != nil {
		return err
	}
	*x = HandOverType(value)
	return nil
}

func (HandOverType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6ac55348274f72c2, []int{1}
}

// 动作类型
// 注意为了能够用一个int合并多个动作
// 因此所有动作的值均为二进制bit field独立
type ActionType int32

const (
	ActionType_enumActionType_None          ActionType = 0
	ActionType_enumActionType_SKIP          ActionType = 1
	ActionType_enumActionType_DISCARD       ActionType = 2
	ActionType_enumActionType_DRAW          ActionType = 4
	ActionType_enumActionType_Win_SelfDrawn ActionType = 8
)

var ActionType_name = map[int32]string{
	0: "enumActionType_None",
	1: "enumActionType_SKIP",
	2: "enumActionType_DISCARD",
	4: "enumActionType_DRAW",
	8: "enumActionType_Win_SelfDrawn",
}

var ActionType_value = map[string]int32{
	"enumActionType_None":          0,
	"enumActionType_SKIP":          1,
	"enumActionType_DISCARD":       2,
	"enumActionType_DRAW":          4,
	"enumActionType_Win_SelfDrawn": 8,
}

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return proto.EnumName(ActionType_name, int32(x))
}

func (x *ActionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ActionType_value, data, "ActionType")
	if err != nil {
		return err
	}
	*x = ActionType(value)
	return nil
}

func (ActionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6ac55348274f72c2, []int{2}
}

func init() {
	proto.RegisterEnum("prunfast.CardHandType", CardHandType_name, CardHandType_value)
	proto.RegisterEnum("prunfast.HandOverType", HandOverType_name, HandOverType_value)
	proto.RegisterEnum("prunfast.ActionType", ActionType_name, ActionType_value)
}

func init() { proto.RegisterFile("game_pokerface_rf.proto", fileDescriptor_6ac55348274f72c2) }

var fileDescriptor_6ac55348274f72c2 = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xcd, 0x4e, 0xf2, 0x50,
	0x10, 0x86, 0xbf, 0xf2, 0x5b, 0x06, 0x3e, 0x9d, 0x8c, 0x51, 0x14, 0x09, 0x31, 0x2e, 0x59, 0xb8,
	0xe0, 0x0e, 0x90, 0xc6, 0x48, 0x48, 0x94, 0x50, 0x12, 0xd8, 0x35, 0x07, 0x98, 0x42, 0x43, 0x39,
	0xa7, 0x39, 0xb4, 0x1a, 0xef, 0xc2, 0x8d, 0x37, 0xe5, 0x55, 0x99, 0xd3, 0xa0, 0xa0, 0x65, 0xd7,
	0x79, 0x9e, 0x77, 0x9a, 0x77, 0x0e, 0xd4, 0x97, 0x62, 0xc3, 0x5e, 0xa4, 0xd6, 0xac, 0x7d, 0x31,
	0x67, 0x4f, 0xfb, 0x77, 0x91, 0x56, 0xb1, 0x22, 0x3b, 0xd2, 0x89, 0xf4, 0xc5, 0x36, 0x6e, 0xbf,
	0x5b, 0x50, 0xeb, 0x09, 0xbd, 0x78, 0x14, 0x72, 0x31, 0x7e, 0x8b, 0x98, 0x6c, 0x28, 0x3c, 0x29,
	0xc9, 0xf8, 0x8f, 0x2a, 0x50, 0x7c, 0x08, 0x93, 0xed, 0x0a, 0x2d, 0x03, 0xef, 0xd5, 0x66, 0x86,
	0x39, 0x02, 0x28, 0xb9, 0x81, 0x5c, 0x86, 0x8c, 0x79, 0x43, 0x87, 0x22, 0xd0, 0x58, 0x30, 0xd4,
	0x7c, 0x75, 0xa6, 0x58, 0xa4, 0x2a, 0x94, 0xc7, 0x3a, 0x88, 0x42, 0x8e, 0xb1, 0x44, 0xa7, 0x50,
	0xdd, 0x0d, 0x69, 0xb2, 0x4c, 0xff, 0xa1, 0xb2, 0x03, 0x9d, 0x29, 0xda, 0x44, 0x70, 0xf2, 0x33,
	0x76, 0xd2, 0x48, 0xa5, 0xfd, 0x69, 0x41, 0xcd, 0xd4, 0x79, 0x7e, 0x61, 0x9d, 0x56, 0xba, 0x82,
	0x73, 0x96, 0xc9, 0xe6, 0x90, 0x79, 0xbb, 0x8e, 0xb7, 0xd0, 0xca, 0xa8, 0x49, 0x20, 0x3d, 0x97,
	0x43, 0xdf, 0xd1, 0xe2, 0x55, 0xa2, 0x45, 0x2d, 0x68, 0x1c, 0xcd, 0xf4, 0x56, 0xc9, 0x7c, 0x8d,
	0x39, 0x6a, 0xc2, 0x65, 0xc6, 0xa7, 0x8e, 0x35, 0xe6, 0xe9, 0x1a, 0xea, 0x19, 0x3b, 0x50, 0x72,
	0xc9, 0xe6, 0xee, 0x1b, 0x68, 0x1e, 0xfd, 0xf5, 0x48, 0xcd, 0x4c, 0x06, 0x8b, 0xed, 0x0f, 0x0b,
	0xa0, 0x3b, 0x8f, 0x03, 0x25, 0xd3, 0x53, 0xea, 0x70, 0x66, 0x16, 0xf6, 0xe4, 0xfb, 0x90, 0xac,
	0x70, 0x07, 0xfd, 0x21, 0x5a, 0xd4, 0x80, 0x8b, 0x3f, 0xc2, 0xe9, 0xbb, 0xbd, 0xee, 0xc8, 0xc1,
	0xdc, 0x91, 0x25, 0x67, 0xd4, 0x9d, 0xec, 0x7b, 0x1d, 0x88, 0xdf, 0x8f, 0x62, 0x7f, 0x05, 0x00,
	0x00, 0xff, 0xff, 0x03, 0x02, 0x99, 0x72, 0x1b, 0x02, 0x00, 0x00,
}
