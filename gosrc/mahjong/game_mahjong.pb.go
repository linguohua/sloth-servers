// Code generated by protoc-gen-go. DO NOT EDIT.
// source: game_mahjong.proto

package mahjong

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 牌的ID
// 万、筒、索东南西北白发中命名是从日本麻将copy过来的
// 日文主要是服务器的胡牌算法是日本人写的，以示感激
// 其余则是从英文copy过来的
// 英文:http://www.xqbase.com/other/mahjongg_english.htm
// 本文其余多数命名均参考上述英文对照表
type TileID int32

const (
	// enumTid_MAN = 0; // 万子
	TileID_enumTid_MAN1 TileID = 0
	TileID_enumTid_MAN2 TileID = 1
	TileID_enumTid_MAN3 TileID = 2
	TileID_enumTid_MAN4 TileID = 3
	TileID_enumTid_MAN5 TileID = 4
	TileID_enumTid_MAN6 TileID = 5
	TileID_enumTid_MAN7 TileID = 6
	TileID_enumTid_MAN8 TileID = 7
	TileID_enumTid_MAN9 TileID = 8
	// enumTid_PIN = 9;  // 筒子
	TileID_enumTid_PIN1 TileID = 9
	TileID_enumTid_PIN2 TileID = 10
	TileID_enumTid_PIN3 TileID = 11
	TileID_enumTid_PIN4 TileID = 12
	TileID_enumTid_PIN5 TileID = 13
	TileID_enumTid_PIN6 TileID = 14
	TileID_enumTid_PIN7 TileID = 15
	TileID_enumTid_PIN8 TileID = 16
	TileID_enumTid_PIN9 TileID = 17
	// enumTid_SOU = 18;  // 索子、条子
	TileID_enumTid_SOU1          TileID = 18
	TileID_enumTid_SOU2          TileID = 19
	TileID_enumTid_SOU3          TileID = 20
	TileID_enumTid_SOU4          TileID = 21
	TileID_enumTid_SOU5          TileID = 22
	TileID_enumTid_SOU6          TileID = 23
	TileID_enumTid_SOU7          TileID = 24
	TileID_enumTid_SOU8          TileID = 25
	TileID_enumTid_SOU9          TileID = 26
	TileID_enumTid_TON           TileID = 27
	TileID_enumTid_NAN           TileID = 28
	TileID_enumTid_SHA           TileID = 29
	TileID_enumTid_PEI           TileID = 30
	TileID_enumTid_HAK           TileID = 31
	TileID_enumTid_HAT           TileID = 32
	TileID_enumTid_CHU           TileID = 33
	TileID_enumTid_PLUM          TileID = 34
	TileID_enumTid_ORCHID        TileID = 35
	TileID_enumTid_BAMBOO        TileID = 36
	TileID_enumTid_CHRYSANTHEMUM TileID = 37
	TileID_enumTid_SPRING        TileID = 38
	TileID_enumTid_SUMMER        TileID = 39
	TileID_enumTid_AUTUMN        TileID = 40
	TileID_enumTid_WINTER        TileID = 41
	TileID_enumTid_MAX           TileID = 42
)

var TileID_name = map[int32]string{
	0:  "enumTid_MAN1",
	1:  "enumTid_MAN2",
	2:  "enumTid_MAN3",
	3:  "enumTid_MAN4",
	4:  "enumTid_MAN5",
	5:  "enumTid_MAN6",
	6:  "enumTid_MAN7",
	7:  "enumTid_MAN8",
	8:  "enumTid_MAN9",
	9:  "enumTid_PIN1",
	10: "enumTid_PIN2",
	11: "enumTid_PIN3",
	12: "enumTid_PIN4",
	13: "enumTid_PIN5",
	14: "enumTid_PIN6",
	15: "enumTid_PIN7",
	16: "enumTid_PIN8",
	17: "enumTid_PIN9",
	18: "enumTid_SOU1",
	19: "enumTid_SOU2",
	20: "enumTid_SOU3",
	21: "enumTid_SOU4",
	22: "enumTid_SOU5",
	23: "enumTid_SOU6",
	24: "enumTid_SOU7",
	25: "enumTid_SOU8",
	26: "enumTid_SOU9",
	27: "enumTid_TON",
	28: "enumTid_NAN",
	29: "enumTid_SHA",
	30: "enumTid_PEI",
	31: "enumTid_HAK",
	32: "enumTid_HAT",
	33: "enumTid_CHU",
	34: "enumTid_PLUM",
	35: "enumTid_ORCHID",
	36: "enumTid_BAMBOO",
	37: "enumTid_CHRYSANTHEMUM",
	38: "enumTid_SPRING",
	39: "enumTid_SUMMER",
	40: "enumTid_AUTUMN",
	41: "enumTid_WINTER",
	42: "enumTid_MAX",
}

var TileID_value = map[string]int32{
	"enumTid_MAN1":          0,
	"enumTid_MAN2":          1,
	"enumTid_MAN3":          2,
	"enumTid_MAN4":          3,
	"enumTid_MAN5":          4,
	"enumTid_MAN6":          5,
	"enumTid_MAN7":          6,
	"enumTid_MAN8":          7,
	"enumTid_MAN9":          8,
	"enumTid_PIN1":          9,
	"enumTid_PIN2":          10,
	"enumTid_PIN3":          11,
	"enumTid_PIN4":          12,
	"enumTid_PIN5":          13,
	"enumTid_PIN6":          14,
	"enumTid_PIN7":          15,
	"enumTid_PIN8":          16,
	"enumTid_PIN9":          17,
	"enumTid_SOU1":          18,
	"enumTid_SOU2":          19,
	"enumTid_SOU3":          20,
	"enumTid_SOU4":          21,
	"enumTid_SOU5":          22,
	"enumTid_SOU6":          23,
	"enumTid_SOU7":          24,
	"enumTid_SOU8":          25,
	"enumTid_SOU9":          26,
	"enumTid_TON":           27,
	"enumTid_NAN":           28,
	"enumTid_SHA":           29,
	"enumTid_PEI":           30,
	"enumTid_HAK":           31,
	"enumTid_HAT":           32,
	"enumTid_CHU":           33,
	"enumTid_PLUM":          34,
	"enumTid_ORCHID":        35,
	"enumTid_BAMBOO":        36,
	"enumTid_CHRYSANTHEMUM": 37,
	"enumTid_SPRING":        38,
	"enumTid_SUMMER":        39,
	"enumTid_AUTUMN":        40,
	"enumTid_WINTER":        41,
	"enumTid_MAX":           42,
}

func (x TileID) Enum() *TileID {
	p := new(TileID)
	*p = x
	return p
}

func (x TileID) String() string {
	return proto.EnumName(TileID_name, int32(x))
}

func (x *TileID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TileID_value, data, "TileID")
	if err != nil {
		return err
	}
	*x = TileID(value)
	return nil
}

func (TileID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_116d3ec96f90ca98, []int{0}
}

type MessageCode int32

const (
	MessageCode_OPInvalid            MessageCode = 0
	MessageCode_OPAction             MessageCode = 1
	MessageCode_OPActionResultNotify MessageCode = 2
	MessageCode_OPActionAllowed      MessageCode = 3
	MessageCode_OPReActionAllowed    MessageCode = 5
	MessageCode_OPDeal               MessageCode = 6
	MessageCode_OPHandOver           MessageCode = 7
	MessageCode_OPRestore            MessageCode = 8
	MessageCode_OPPlayerLeaveRoom    MessageCode = 9
	MessageCode_OPPlayerEnterRoom    MessageCode = 10
	MessageCode_OPDisbandRequest     MessageCode = 11
	MessageCode_OPDisbandNotify      MessageCode = 12
	MessageCode_OPDisbandAnswer      MessageCode = 13
	MessageCode_OPPlayerReady        MessageCode = 14
	MessageCode_OPRoomDeleted        MessageCode = 15
	MessageCode_OPRoomUpdate         MessageCode = 16
	MessageCode_OPRoomShowTips       MessageCode = 17
	MessageCode_OPGameOver           MessageCode = 18
	MessageCode_OPKickout            MessageCode = 19
	MessageCode_OPDonate             MessageCode = 20
	MessageCode_OPUpdateLocation     MessageCode = 21
	MessageCode_OP2Lobby             MessageCode = 22
	MessageCode_OPUpdatePropCfg      MessageCode = 23
)

var MessageCode_name = map[int32]string{
	0:  "OPInvalid",
	1:  "OPAction",
	2:  "OPActionResultNotify",
	3:  "OPActionAllowed",
	5:  "OPReActionAllowed",
	6:  "OPDeal",
	7:  "OPHandOver",
	8:  "OPRestore",
	9:  "OPPlayerLeaveRoom",
	10: "OPPlayerEnterRoom",
	11: "OPDisbandRequest",
	12: "OPDisbandNotify",
	13: "OPDisbandAnswer",
	14: "OPPlayerReady",
	15: "OPRoomDeleted",
	16: "OPRoomUpdate",
	17: "OPRoomShowTips",
	18: "OPGameOver",
	19: "OPKickout",
	20: "OPDonate",
	21: "OPUpdateLocation",
	22: "OP2Lobby",
	23: "OPUpdatePropCfg",
}

var MessageCode_value = map[string]int32{
	"OPInvalid":            0,
	"OPAction":             1,
	"OPActionResultNotify": 2,
	"OPActionAllowed":      3,
	"OPReActionAllowed":    5,
	"OPDeal":               6,
	"OPHandOver":           7,
	"OPRestore":            8,
	"OPPlayerLeaveRoom":    9,
	"OPPlayerEnterRoom":    10,
	"OPDisbandRequest":     11,
	"OPDisbandNotify":      12,
	"OPDisbandAnswer":      13,
	"OPPlayerReady":        14,
	"OPRoomDeleted":        15,
	"OPRoomUpdate":         16,
	"OPRoomShowTips":       17,
	"OPGameOver":           18,
	"OPKickout":            19,
	"OPDonate":             20,
	"OPUpdateLocation":     21,
	"OP2Lobby":             22,
	"OPUpdatePropCfg":      23,
}

func (x MessageCode) Enum() *MessageCode {
	p := new(MessageCode)
	*p = x
	return p
}

func (x MessageCode) String() string {
	return proto.EnumName(MessageCode_name, int32(x))
}

func (x *MessageCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MessageCode_value, data, "MessageCode")
	if err != nil {
		return err
	}
	*x = MessageCode(value)
	return nil
}

func (MessageCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_116d3ec96f90ca98, []int{1}
}

// 牌组（面子）类型
// 例如顺子，刻子，明杠，暗杠
type MeldType int32

const (
	MeldType_enumMeldTypeSequence      MeldType = 0
	MeldType_enumMeldTypeTriplet       MeldType = 1
	MeldType_enumMeldTypeExposedKong   MeldType = 2
	MeldType_enumMeldTypeTriplet2Kong  MeldType = 3
	MeldType_enumMeldTypeConcealedKong MeldType = 4
	MeldType_enumMeldTypeSelfMeld      MeldType = 5
	MeldType_enumMeldTypeChuHH         MeldType = 6
	MeldType_enumMeldTypeChuHH1        MeldType = 7
	MeldType_enumMeldTypeWind          MeldType = 8
	MeldType_enumMeldTypePairKong      MeldType = 9
)

var MeldType_name = map[int32]string{
	0: "enumMeldTypeSequence",
	1: "enumMeldTypeTriplet",
	2: "enumMeldTypeExposedKong",
	3: "enumMeldTypeTriplet2Kong",
	4: "enumMeldTypeConcealedKong",
	5: "enumMeldTypeSelfMeld",
	6: "enumMeldTypeChuHH",
	7: "enumMeldTypeChuHH1",
	8: "enumMeldTypeWind",
	9: "enumMeldTypePairKong",
}

var MeldType_value = map[string]int32{
	"enumMeldTypeSequence":      0,
	"enumMeldTypeTriplet":       1,
	"enumMeldTypeExposedKong":   2,
	"enumMeldTypeTriplet2Kong":  3,
	"enumMeldTypeConcealedKong": 4,
	"enumMeldTypeSelfMeld":      5,
	"enumMeldTypeChuHH":         6,
	"enumMeldTypeChuHH1":        7,
	"enumMeldTypeWind":          8,
	"enumMeldTypePairKong":      9,
}

func (x MeldType) Enum() *MeldType {
	p := new(MeldType)
	*p = x
	return p
}

func (x MeldType) String() string {
	return proto.EnumName(MeldType_name, int32(x))
}

func (x *MeldType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MeldType_value, data, "MeldType")
	if err != nil {
		return err
	}
	*x = MeldType(value)
	return nil
}

func (MeldType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_116d3ec96f90ca98, []int{2}
}

// 动作类型
// 注意为了能够用一个int合并多个动作
// 因此所有动作的值均为二进制bit field独立
type ActionType int32

const (
	ActionType_enumActionType_SKIP           ActionType = 1
	ActionType_enumActionType_DISCARD        ActionType = 2
	ActionType_enumActionType_DRAW           ActionType = 4
	ActionType_enumActionType_CHOW           ActionType = 8
	ActionType_enumActionType_PONG           ActionType = 16
	ActionType_enumActionType_KONG_Exposed   ActionType = 32
	ActionType_enumActionType_KONG_Concealed ActionType = 64
	ActionType_enumActionType_WIN_Chuck      ActionType = 128
	ActionType_enumActionType_WIN_SelfDrawn  ActionType = 256
	ActionType_enumActionType_KONG_Triplet2  ActionType = 512
	ActionType_enumActionType_FirstReadyHand ActionType = 1024
	ActionType_enumActionType_ReadyHand      ActionType = 2048
	ActionType_enumActionType_CustomA        ActionType = 4096
	ActionType_enumActionType_CustomB        ActionType = 8192
	ActionType_enumActionType_CustomC        ActionType = 16384
	ActionType_enumActionType_CustomD        ActionType = 32768
)

var ActionType_name = map[int32]string{
	1:     "enumActionType_SKIP",
	2:     "enumActionType_DISCARD",
	4:     "enumActionType_DRAW",
	8:     "enumActionType_CHOW",
	16:    "enumActionType_PONG",
	32:    "enumActionType_KONG_Exposed",
	64:    "enumActionType_KONG_Concealed",
	128:   "enumActionType_WIN_Chuck",
	256:   "enumActionType_WIN_SelfDrawn",
	512:   "enumActionType_KONG_Triplet2",
	1024:  "enumActionType_FirstReadyHand",
	2048:  "enumActionType_ReadyHand",
	4096:  "enumActionType_CustomA",
	8192:  "enumActionType_CustomB",
	16384: "enumActionType_CustomC",
	32768: "enumActionType_CustomD",
}

var ActionType_value = map[string]int32{
	"enumActionType_SKIP":           1,
	"enumActionType_DISCARD":        2,
	"enumActionType_DRAW":           4,
	"enumActionType_CHOW":           8,
	"enumActionType_PONG":           16,
	"enumActionType_KONG_Exposed":   32,
	"enumActionType_KONG_Concealed": 64,
	"enumActionType_WIN_Chuck":      128,
	"enumActionType_WIN_SelfDrawn":  256,
	"enumActionType_KONG_Triplet2":  512,
	"enumActionType_FirstReadyHand": 1024,
	"enumActionType_ReadyHand":      2048,
	"enumActionType_CustomA":        4096,
	"enumActionType_CustomB":        8192,
	"enumActionType_CustomC":        16384,
	"enumActionType_CustomD":        32768,
}

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return proto.EnumName(ActionType_name, int32(x))
}

func (x *ActionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ActionType_value, data, "ActionType")
	if err != nil {
		return err
	}
	*x = ActionType(value)
	return nil
}

func (ActionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_116d3ec96f90ca98, []int{3}
}

// 一手牌局结束
// 可能的结果是：流局、有人自摸胡牌、有人放铳其他人胡牌
type HandOverType int32

const (
	HandOverType_enumHandOverType_None          HandOverType = 0
	HandOverType_enumHandOverType_Win_SelfDrawn HandOverType = 1
	HandOverType_enumHandOverType_Win_Chuck     HandOverType = 2
	HandOverType_enumHandOverType_Chucker       HandOverType = 3
	HandOverType_enumHandOverType_Konger        HandOverType = 4
	HandOverType_enumHandOverType_Win_RobKong   HandOverType = 5
)

var HandOverType_name = map[int32]string{
	0: "enumHandOverType_None",
	1: "enumHandOverType_Win_SelfDrawn",
	2: "enumHandOverType_Win_Chuck",
	3: "enumHandOverType_Chucker",
	4: "enumHandOverType_Konger",
	5: "enumHandOverType_Win_RobKong",
}

var HandOverType_value = map[string]int32{
	"enumHandOverType_None":          0,
	"enumHandOverType_Win_SelfDrawn": 1,
	"enumHandOverType_Win_Chuck":     2,
	"enumHandOverType_Chucker":       3,
	"enumHandOverType_Konger":        4,
	"enumHandOverType_Win_RobKong":   5,
}

func (x HandOverType) Enum() *HandOverType {
	p := new(HandOverType)
	*p = x
	return p
}

func (x HandOverType) String() string {
	return proto.EnumName(HandOverType_name, int32(x))
}

func (x *HandOverType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HandOverType_value, data, "HandOverType")
	if err != nil {
		return err
	}
	*x = HandOverType(value)
	return nil
}

func (HandOverType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_116d3ec96f90ca98, []int{4}
}

// 消息包装，把其他消息体格式化为byte array，
// 加上消息码构成一个GameMessage，便于解析
type GameMessage struct {
	Ops                  *int32   `protobuf:"varint,1,req,name=Ops" json:"Ops,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=Data" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameMessage) Reset()         { *m = GameMessage{} }
func (m *GameMessage) String() string { return proto.CompactTextString(m) }
func (*GameMessage) ProtoMessage()    {}
func (*GameMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_116d3ec96f90ca98, []int{0}
}
func (m *GameMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameMessage.Unmarshal(m, b)
}
func (m *GameMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameMessage.Marshal(b, m, deterministic)
}
func (m *GameMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameMessage.Merge(m, src)
}
func (m *GameMessage) XXX_Size() int {
	return xxx_messageInfo_GameMessage.Size(m)
}
func (m *GameMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GameMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GameMessage proto.InternalMessageInfo

func (m *GameMessage) GetOps() int32 {
	if m != nil && m.Ops != nil {
		return *m.Ops
	}
	return 0
}

func (m *GameMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// 牌组
type MsgMeldTile struct {
	MeldType             *int32   `protobuf:"varint,1,req,name=meldType" json:"meldType,omitempty"`
	Tile1                *int32   `protobuf:"varint,2,req,name=tile1" json:"tile1,omitempty"`
	Contributor          *int32   `protobuf:"varint,3,opt,name=contributor" json:"contributor,omitempty"`
	ChowTile             *int32   `protobuf:"varint,4,opt,name=chowTile" json:"chowTile,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgMeldTile) Reset()         { *m = MsgMeldTile{} }
func (m *MsgMeldTile) String() string { return proto.CompactTextString(m) }
func (*MsgMeldTile) ProtoMessage()    {}
func (*MsgMeldTile) Descriptor() ([]byte, []int) {
	return fileDescriptor_116d3ec96f90ca98, []int{1}
}
func (m *MsgMeldTile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgMeldTile.Unmarshal(m, b)
}
func (m *MsgMeldTile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgMeldTile.Marshal(b, m, deterministic)
}
func (m *MsgMeldTile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMeldTile.Merge(m, src)
}
func (m *MsgMeldTile) XXX_Size() int {
	return xxx_messageInfo_MsgMeldTile.Size(m)
}
func (m *MsgMeldTile) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMeldTile.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMeldTile proto.InternalMessageInfo

func (m *MsgMeldTile) GetMeldType() int32 {
	if m != nil && m.MeldType != nil {
		return *m.MeldType
	}
	return 0
}

func (m *MsgMeldTile) GetTile1() int32 {
	if m != nil && m.Tile1 != nil {
		return *m.Tile1
	}
	return 0
}

func (m *MsgMeldTile) GetContributor() int32 {
	if m != nil && m.Contributor != nil {
		return *m.Contributor
	}
	return 0
}

func (m *MsgMeldTile) GetChowTile() int32 {
	if m != nil && m.ChowTile != nil {
		return *m.ChowTile
	}
	return 0
}

// 玩家麻将牌列表
// 包含了所有客户端需要用于展示的列表
// 客户端根据需要读取对应的列表进行展示
// 对于自己，所有列表都有数据
// 别人的牌，则只有部分列表有数据（例如花牌列表）
type MsgPlayerTileList struct {
	ChairID         *int32  `protobuf:"varint,1,req,name=chairID" json:"chairID,omitempty"`
	TileCountInHand *int32  `protobuf:"varint,2,req,name=tileCountInHand" json:"tileCountInHand,omitempty"`
	TilesHand       []int32 `protobuf:"varint,3,rep,name=tilesHand" json:"tilesHand,omitempty"`
	TilesFlower     []int32 `protobuf:"varint,4,rep,name=tilesFlower" json:"tilesFlower,omitempty"`
	TilesDiscard    []int32 `protobuf:"varint,5,rep,name=tilesDiscard" json:"tilesDiscard,omitempty"`
	// 牌组（顺子，刻子，杠牌）列表，需要明牌示人
	// 对于暗杠牌，客户端需要暗牌示人
	// 落地牌组（也即是吃椪杠牌组，需要显示给所有人看到，注意暗杠仅需要一个标记）
	Melds                []*MsgMeldTile `protobuf:"bytes,6,rep,name=melds" json:"melds,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *MsgPlayerTileList) Reset()         { *m = MsgPlayerTileList{} }
func (m *MsgPlayerTileList) String() string { return proto.CompactTextString(m) }
func (*MsgPlayerTileList) ProtoMessage()    {}
func (*MsgPlayerTileList) Descriptor() ([]byte, []int) {
	return fileDescriptor_116d3ec96f90ca98, []int{2}
}
func (m *MsgPlayerTileList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgPlayerTileList.Unmarshal(m, b)
}
func (m *MsgPlayerTileList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgPlayerTileList.Marshal(b, m, deterministic)
}
func (m *MsgPlayerTileList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPlayerTileList.Merge(m, src)
}
func (m *MsgPlayerTileList) XXX_Size() int {
	return xxx_messageInfo_MsgPlayerTileList.Size(m)
}
func (m *MsgPlayerTileList) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPlayerTileList.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPlayerTileList proto.InternalMessageInfo

func (m *MsgPlayerTileList) GetChairID() int32 {
	if m != nil && m.ChairID != nil {
		return *m.ChairID
	}
	return 0
}

func (m *MsgPlayerTileList) GetTileCountInHand() int32 {
	if m != nil && m.TileCountInHand != nil {
		return *m.TileCountInHand
	}
	return 0
}

func (m *MsgPlayerTileList) GetTilesHand() []int32 {
	if m != nil {
		return m.TilesHand
	}
	return nil
}

func (m *MsgPlayerTileList) GetTilesFlower() []int32 {
	if m != nil {
		return m.TilesFlower
	}
	return nil
}

func (m *MsgPlayerTileList) GetTilesDiscard() []int32 {
	if m != nil {
		return m.TilesDiscard
	}
	return nil
}

func (m *MsgPlayerTileList) GetMelds() []*MsgMeldTile {
	if m != nil {
		return m.Melds
	}
	return nil
}

// 发牌
// 服务器下发给客户端
// 客户端收到消息后，做如下处理：
// 1. 显示自己的牌
// 2. 显示其他人的牌（暗牌，庄家14张）
// 3. 显示庄家
// 4. 显示所有人的花牌
type MsgDeal struct {
	BankerChairID        *int32               `protobuf:"varint,1,req,name=bankerChairID" json:"bankerChairID,omitempty"`
	WindFlowerID         *int32               `protobuf:"varint,2,req,name=windFlowerID" json:"windFlowerID,omitempty"`
	PlayerTileLists      []*MsgPlayerTileList `protobuf:"bytes,3,rep,name=playerTileLists" json:"playerTileLists,omitempty"`
	TilesInWall          *int32               `protobuf:"varint,4,req,name=tilesInWall" json:"tilesInWall,omitempty"`
	Dice1                *int32               `protobuf:"varint,5,opt,name=dice1" json:"dice1,omitempty"`
	Dice2                *int32               `protobuf:"varint,6,opt,name=dice2" json:"dice2,omitempty"`
	IsContinuousBanker   *bool                `protobuf:"varint,7,opt,name=isContinuousBanker" json:"isContinuousBanker,omitempty"`
	Markup               *int32               `protobuf:"varint,8,opt,name=markup" json:"markup,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *MsgDeal) Reset()         { *m = MsgDeal{} }
func (m *MsgDeal) String() string { return proto.CompactTextString(m) }
func (*MsgDeal) ProtoMessage()    {}
func (*MsgDeal) Descriptor() ([]byte, []int) {
	return fileDescriptor_116d3ec96f90ca98, []int{3}
}
func (m *MsgDeal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgDeal.Unmarshal(m, b)
}
func (m *MsgDeal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgDeal.Marshal(b, m, deterministic)
}
func (m *MsgDeal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeal.Merge(m, src)
}
func (m *MsgDeal) XXX_Size() int {
	return xxx_messageInfo_MsgDeal.Size(m)
}
func (m *MsgDeal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeal proto.InternalMessageInfo

func (m *MsgDeal) GetBankerChairID() int32 {
	if m != nil && m.BankerChairID != nil {
		return *m.BankerChairID
	}
	return 0
}

func (m *MsgDeal) GetWindFlowerID() int32 {
	if m != nil && m.WindFlowerID != nil {
		return *m.WindFlowerID
	}
	return 0
}

func (m *MsgDeal) GetPlayerTileLists() []*MsgPlayerTileList {
	if m != nil {
		return m.PlayerTileLists
	}
	return nil
}

func (m *MsgDeal) GetTilesInWall() int32 {
	if m != nil && m.TilesInWall != nil {
		return *m.TilesInWall
	}
	return 0
}

func (m *MsgDeal) GetDice1() int32 {
	if m != nil && m.Dice1 != nil {
		return *m.Dice1
	}
	return 0
}

func (m *MsgDeal) GetDice2() int32 {
	if m != nil && m.Dice2 != nil {
		return *m.Dice2
	}
	return 0
}

func (m *MsgDeal) GetIsContinuousBanker() bool {
	if m != nil && m.IsContinuousBanker != nil {
		return *m.IsContinuousBanker
	}
	return false
}

func (m *MsgDeal) GetMarkup() int32 {
	if m != nil && m.Markup != nil {
		return *m.Markup
	}
	return 0
}

// 听牌提示
type MsgReadyHandTips struct {
	TargetTile           *int32   `protobuf:"varint,1,req,name=targetTile" json:"targetTile,omitempty"`
	ReadyHandList        []int32  `protobuf:"varint,2,rep,name=readyHandList" json:"readyHandList,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgReadyHandTips) Reset()         { *m = MsgReadyHandTips{} }
func (m *MsgReadyHandTips) String() string { return proto.CompactTextString(m) }
func (*MsgReadyHandTips) ProtoMessage()    {}
func (*MsgReadyHandTips) Descriptor() ([]byte, []int) {
	return fileDescriptor_116d3ec96f90ca98, []int{4}
}
func (m *MsgReadyHandTips) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgReadyHandTips.Unmarshal(m, b)
}
func (m *MsgReadyHandTips) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgReadyHandTips.Marshal(b, m, deterministic)
}
func (m *MsgReadyHandTips) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReadyHandTips.Merge(m, src)
}
func (m *MsgReadyHandTips) XXX_Size() int {
	return xxx_messageInfo_MsgReadyHandTips.Size(m)
}
func (m *MsgReadyHandTips) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReadyHandTips.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReadyHandTips proto.InternalMessageInfo

func (m *MsgReadyHandTips) GetTargetTile() int32 {
	if m != nil && m.TargetTile != nil {
		return *m.TargetTile
	}
	return 0
}

func (m *MsgReadyHandTips) GetReadyHandList() []int32 {
	if m != nil {
		return m.ReadyHandList
	}
	return nil
}

// 服务器准许客户端做游戏动作
// 服务器发送给客户端
// 客户端收到本消息后，于界面上提示或者允许用户操作
// 在用户操作完成后（或者超时），发送MsgPlayerAction消息给服务器
type MsgAllowPlayerAction struct {
	QaIndex              *int32              `protobuf:"varint,1,req,name=qaIndex" json:"qaIndex,omitempty"`
	ActionChairID        *int32              `protobuf:"varint,2,req,name=actionChairID" json:"actionChairID,omitempty"`
	AllowedActions       *int32              `protobuf:"varint,3,req,name=allowedActions" json:"allowedActions,omitempty"`
	TimeoutInSeconds     *int32              `protobuf:"varint,4,opt,name=timeoutInSeconds" json:"timeoutInSeconds,omitempty"`
	TipsForAction        []*MsgReadyHandTips `protobuf:"bytes,5,rep,name=tipsForAction" json:"tipsForAction,omitempty"`
	MeldsForAction       []*MsgMeldTile      `protobuf:"bytes,6,rep,name=meldsForAction" json:"meldsForAction,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *MsgAllowPlayerAction) Reset()         { *m = MsgAllowPlayerAction{} }
func (m *MsgAllowPlayerAction) String() string { return proto.CompactTextString(m) }
func (*MsgAllowPlayerAction) ProtoMessage()    {}
func (*MsgAllowPlayerAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_116d3ec96f90ca98, []int{5}
}
func (m *MsgAllowPlayerAction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgAllowPlayerAction.Unmarshal(m, b)
}
func (m *MsgAllowPlayerAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgAllowPlayerAction.Marshal(b, m, deterministic)
}
func (m *MsgAllowPlayerAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAllowPlayerAction.Merge(m, src)
}
func (m *MsgAllowPlayerAction) XXX_Size() int {
	return xxx_messageInfo_MsgAllowPlayerAction.Size(m)
}
func (m *MsgAllowPlayerAction) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAllowPlayerAction.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAllowPlayerAction proto.InternalMessageInfo

func (m *MsgAllowPlayerAction) GetQaIndex() int32 {
	if m != nil && m.QaIndex != nil {
		return *m.QaIndex
	}
	return 0
}

func (m *MsgAllowPlayerAction) GetActionChairID() int32 {
	if m != nil && m.ActionChairID != nil {
		return *m.ActionChairID
	}
	return 0
}

func (m *MsgAllowPlayerAction) GetAllowedActions() int32 {
	if m != nil && m.AllowedActions != nil {
		return *m.AllowedActions
	}
	return 0
}

func (m *MsgAllowPlayerAction) GetTimeoutInSeconds() int32 {
	if m != nil && m.TimeoutInSeconds != nil {
		return *m.TimeoutInSeconds
	}
	return 0
}

func (m *MsgAllowPlayerAction) GetTipsForAction() []*MsgReadyHandTips {
	if m != nil {
		return m.TipsForAction
	}
	return nil
}

func (m *MsgAllowPlayerAction) GetMeldsForAction() []*MsgMeldTile {
	if m != nil {
		return m.MeldsForAction
	}
	return nil
}

// 服务器准许客户端做游戏动作
// 服务器发送给客户端
// 客户端收到本消息后，于界面上提示或者允许用户操作
// 在用户操作完成后（或者超时），发送MsgPlayerAction消息给服务器
type MsgAllowPlayerReAction struct {
	QaIndex              *int32         `protobuf:"varint,1,req,name=qaIndex" json:"qaIndex,omitempty"`
	ActionChairID        *int32         `protobuf:"varint,2,req,name=actionChairID" json:"actionChairID,omitempty"`
	AllowedActions       *int32         `protobuf:"varint,3,req,name=allowedActions" json:"allowedActions,omitempty"`
	TimeoutInSeconds     *int32         `protobuf:"varint,4,opt,name=timeoutInSeconds" json:"timeoutInSeconds,omitempty"`
	MeldsForAction       []*MsgMeldTile `protobuf:"bytes,5,rep,name=meldsForAction" json:"meldsForAction,omitempty"`
	VictimTileID         *int32         `protobuf:"varint,6,req,name=victimTileID" json:"victimTileID,omitempty"`
	VictimChairID        *int32         `protobuf:"varint,7,req,name=victimChairID" json:"victimChairID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *MsgAllowPlayerReAction) Reset()         { *m = MsgAllowPlayerReAction{} }
func (m *MsgAllowPlayerReAction) String() string { return proto.CompactTextString(m) }
func (*MsgAllowPlayerReAction) ProtoMessage()    {}
func (*MsgAllowPlayerReAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_116d3ec96f90ca98, []int{6}
}
func (m *MsgAllowPlayerReAction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgAllowPlayerReAction.Unmarshal(m, b)
}
func (m *MsgAllowPlayerReAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgAllowPlayerReAction.Marshal(b, m, deterministic)
}
func (m *MsgAllowPlayerReAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAllowPlayerReAction.Merge(m, src)
}
func (m *MsgAllowPlayerReAction) XXX_Size() int {
	return xxx_messageInfo_MsgAllowPlayerReAction.Size(m)
}
func (m *MsgAllowPlayerReAction) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAllowPlayerReAction.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAllowPlayerReAction proto.InternalMessageInfo

func (m *MsgAllowPlayerReAction) GetQaIndex() int32 {
	if m != nil && m.QaIndex != nil {
		return *m.QaIndex
	}
	return 0
}

func (m *MsgAllowPlayerReAction) GetActionChairID() int32 {
	if m != nil && m.ActionChairID != nil {
		return *m.ActionChairID
	}
	return 0
}

func (m *MsgAllowPlayerReAction) GetAllowedActions() int32 {
	if m != nil && m.AllowedActions != nil {
		return *m.AllowedActions
	}
	return 0
}

func (m *MsgAllowPlayerReAction) GetTimeoutInSeconds() int32 {
	if m != nil && m.TimeoutInSeconds != nil {
		return *m.TimeoutInSeconds
	}
	return 0
}

func (m *MsgAllowPlayerReAction) GetMeldsForAction() []*MsgMeldTile {
	if m != nil {
		return m.MeldsForAction
	}
	return nil
}

func (m *MsgAllowPlayerReAction) GetVictimTileID() int32 {
	if m != nil && m.VictimTileID != nil {
		return *m.VictimTileID
	}
	return 0
}

func (m *MsgAllowPlayerReAction) GetVictimChairID() int32 {
	if m != nil && m.VictimChairID != nil {
		return *m.VictimChairID
	}
	return 0
}

// 玩家执行动作
// 客户端必须是收到服务器允许动作消息并
// 通过界面让玩家完成操作之后，通过该消息通知服务器用户执行了动作
// 客户端需要填写正确的qaIndex，以及action（这两个参数都是从服务器下发）
type MsgPlayerAction struct {
	// QA索引，该索引是服务器通过出牌许可消息下发的，客户端需要回填于此
	// QA索引的目的是为了服务器对消息的控制：服务器对于新收到的消息如果其QA索引
	// 不等于服务器当前期待的QA索引，服务器将会抛弃该消息
	// QA索引就是流水号，QA代表Question&Answer
	// 本文档其余处QA索引意义与此一致
	QaIndex              *int32   `protobuf:"varint,1,req,name=qaIndex" json:"qaIndex,omitempty"`
	Action               *int32   `protobuf:"varint,2,req,name=action" json:"action,omitempty"`
	Flags                *int32   `protobuf:"varint,3,opt,name=flags" json:"flags,omitempty"`
	Tile                 *int32   `protobuf:"varint,4,opt,name=tile" json:"tile,omitempty"`
	MeldType             *int32   `protobuf:"varint,5,opt,name=meldType" json:"meldType,omitempty"`
	MeldTile1            *int32   `protobuf:"varint,6,opt,name=meldTile1" json:"meldTile1,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgPlayerAction) Reset()         { *m = MsgPlayerAction{} }
func (m *MsgPlayerAction) String() string { return proto.CompactTextString(m) }
func (*MsgPlayerAction) ProtoMessage()    {}
func (*MsgPlayerAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_116d3ec96f90ca98, []int{7}
}
func (m *MsgPlayerAction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgPlayerAction.Unmarshal(m, b)
}
func (m *MsgPlayerAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgPlayerAction.Marshal(b, m, deterministic)
}
func (m *MsgPlayerAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPlayerAction.Merge(m, src)
}
func (m *MsgPlayerAction) XXX_Size() int {
	return xxx_messageInfo_MsgPlayerAction.Size(m)
}
func (m *MsgPlayerAction) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPlayerAction.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPlayerAction proto.InternalMessageInfo

func (m *MsgPlayerAction) GetQaIndex() int32 {
	if m != nil && m.QaIndex != nil {
		return *m.QaIndex
	}
	return 0
}

func (m *MsgPlayerAction) GetAction() int32 {
	if m != nil && m.Action != nil {
		return *m.Action
	}
	return 0
}

func (m *MsgPlayerAction) GetFlags() int32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

func (m *MsgPlayerAction) GetTile() int32 {
	if m != nil && m.Tile != nil {
		return *m.Tile
	}
	return 0
}

func (m *MsgPlayerAction) GetMeldType() int32 {
	if m != nil && m.MeldType != nil {
		return *m.MeldType
	}
	return 0
}

func (m *MsgPlayerAction) GetMeldTile1() int32 {
	if m != nil && m.MeldTile1 != nil {
		return *m.MeldTile1
	}
	return 0
}

// 服务器通知所有玩家某个玩家进行了何种动作
// 客户端收到消息后，对界面进行更新或者播放对应动作动画
type MsgActionResultNotify struct {
	TargetChairID        *int32       `protobuf:"varint,1,req,name=targetChairID" json:"targetChairID,omitempty"`
	Action               *int32       `protobuf:"varint,2,req,name=action" json:"action,omitempty"`
	ActionTile           *int32       `protobuf:"varint,3,opt,name=actionTile" json:"actionTile,omitempty"`
	ActionMeld           *MsgMeldTile `protobuf:"bytes,4,opt,name=actionMeld" json:"actionMeld,omitempty"`
	NewFlowers           []int32      `protobuf:"varint,5,rep,name=newFlowers" json:"newFlowers,omitempty"`
	TilesInWall          *int32       `protobuf:"varint,6,opt,name=tilesInWall" json:"tilesInWall,omitempty"`
	WaitDiscardReAction  *bool        `protobuf:"varint,7,opt,name=waitDiscardReAction" json:"waitDiscardReAction,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *MsgActionResultNotify) Reset()         { *m = MsgActionResultNotify{} }
func (m *MsgActionResultNotify) String() string { return proto.CompactTextString(m) }
func (*MsgActionResultNotify) ProtoMessage()    {}
func (*MsgActionResultNotify) Descriptor() ([]byte, []int) {
	return fileDescriptor_116d3ec96f90ca98, []int{8}
}
func (m *MsgActionResultNotify) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgActionResultNotify.Unmarshal(m, b)
}
func (m *MsgActionResultNotify) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgActionResultNotify.Marshal(b, m, deterministic)
}
func (m *MsgActionResultNotify) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgActionResultNotify.Merge(m, src)
}
func (m *MsgActionResultNotify) XXX_Size() int {
	return xxx_messageInfo_MsgActionResultNotify.Size(m)
}
func (m *MsgActionResultNotify) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgActionResultNotify.DiscardUnknown(m)
}

var xxx_messageInfo_MsgActionResultNotify proto.InternalMessageInfo

func (m *MsgActionResultNotify) GetTargetChairID() int32 {
	if m != nil && m.TargetChairID != nil {
		return *m.TargetChairID
	}
	return 0
}

func (m *MsgActionResultNotify) GetAction() int32 {
	if m != nil && m.Action != nil {
		return *m.Action
	}
	return 0
}

func (m *MsgActionResultNotify) GetActionTile() int32 {
	if m != nil && m.ActionTile != nil {
		return *m.ActionTile
	}
	return 0
}

func (m *MsgActionResultNotify) GetActionMeld() *MsgMeldTile {
	if m != nil {
		return m.ActionMeld
	}
	return nil
}

func (m *MsgActionResultNotify) GetNewFlowers() []int32 {
	if m != nil {
		return m.NewFlowers
	}
	return nil
}

func (m *MsgActionResultNotify) GetTilesInWall() int32 {
	if m != nil && m.TilesInWall != nil {
		return *m.TilesInWall
	}
	return 0
}

func (m *MsgActionResultNotify) GetWaitDiscardReAction() bool {
	if m != nil && m.WaitDiscardReAction != nil {
		return *m.WaitDiscardReAction
	}
	return false
}

// 掉线恢复
type MsgRestore struct {
	MsgDeal              *MsgDeal `protobuf:"bytes,1,req,name=msgDeal" json:"msgDeal,omitempty"`
	ReadyHandChairs      []int32  `protobuf:"varint,2,rep,name=readyHandChairs" json:"readyHandChairs,omitempty"`
	LastDiscaredChairID  *int32   `protobuf:"varint,3,opt,name=lastDiscaredChairID" json:"lastDiscaredChairID,omitempty"`
	IsMeNewDraw          *bool    `protobuf:"varint,4,opt,name=isMeNewDraw" json:"isMeNewDraw,omitempty"`
	WaitDiscardReAction  *bool    `protobuf:"varint,5,opt,name=waitDiscardReAction" json:"waitDiscardReAction,omitempty"`
	FlyReadyHandChairs   []int32  `protobuf:"varint,6,rep,name=flyReadyHandChairs" json:"flyReadyHandChairs,omitempty"`
	Extra                []byte   `protobuf:"bytes,7,opt,name=extra" json:"extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgRestore) Reset()         { *m = MsgRestore{} }
func (m *MsgRestore) String() string { return proto.CompactTextString(m) }
func (*MsgRestore) ProtoMessage()    {}
func (*MsgRestore) Descriptor() ([]byte, []int) {
	return fileDescriptor_116d3ec96f90ca98, []int{9}
}
func (m *MsgRestore) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgRestore.Unmarshal(m, b)
}
func (m *MsgRestore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgRestore.Marshal(b, m, deterministic)
}
func (m *MsgRestore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRestore.Merge(m, src)
}
func (m *MsgRestore) XXX_Size() int {
	return xxx_messageInfo_MsgRestore.Size(m)
}
func (m *MsgRestore) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRestore.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRestore proto.InternalMessageInfo

func (m *MsgRestore) GetMsgDeal() *MsgDeal {
	if m != nil {
		return m.MsgDeal
	}
	return nil
}

func (m *MsgRestore) GetReadyHandChairs() []int32 {
	if m != nil {
		return m.ReadyHandChairs
	}
	return nil
}

func (m *MsgRestore) GetLastDiscaredChairID() int32 {
	if m != nil && m.LastDiscaredChairID != nil {
		return *m.LastDiscaredChairID
	}
	return 0
}

func (m *MsgRestore) GetIsMeNewDraw() bool {
	if m != nil && m.IsMeNewDraw != nil {
		return *m.IsMeNewDraw
	}
	return false
}

func (m *MsgRestore) GetWaitDiscardReAction() bool {
	if m != nil && m.WaitDiscardReAction != nil {
		return *m.WaitDiscardReAction
	}
	return false
}

func (m *MsgRestore) GetFlyReadyHandChairs() []int32 {
	if m != nil {
		return m.FlyReadyHandChairs
	}
	return nil
}

func (m *MsgRestore) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

// 大胡者的计分
type MsgPlayerScoreGreatWin struct {
	BaseWinScore          *int32   `protobuf:"varint,1,req,name=baseWinScore" json:"baseWinScore,omitempty"`
	GreatWinType          *int32   `protobuf:"varint,2,req,name=greatWinType" json:"greatWinType,omitempty"`
	GreatWinPoints        *int32   `protobuf:"varint,3,req,name=greatWinPoints" json:"greatWinPoints,omitempty"`
	TrimGreatWinPoints    *int32   `protobuf:"varint,4,req,name=trimGreatWinPoints" json:"trimGreatWinPoints,omitempty"`
	ContinuousBankerExtra *int32   `protobuf:"varint,5,opt,name=continuousBankerExtra" json:"continuousBankerExtra,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *MsgPlayerScoreGreatWin) Reset()         { *m = MsgPlayerScoreGreatWin{} }
func (m *MsgPlayerScoreGreatWin) String() string { return proto.CompactTextString(m) }
func (*MsgPlayerScoreGreatWin) ProtoMessage()    {}
func (*MsgPlayerScoreGreatWin) Descriptor() ([]byte, []int) {
	return fileDescriptor_116d3ec96f90ca98, []int{10}
}
func (m *MsgPlayerScoreGreatWin) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgPlayerScoreGreatWin.Unmarshal(m, b)
}
func (m *MsgPlayerScoreGreatWin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgPlayerScoreGreatWin.Marshal(b, m, deterministic)
}
func (m *MsgPlayerScoreGreatWin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPlayerScoreGreatWin.Merge(m, src)
}
func (m *MsgPlayerScoreGreatWin) XXX_Size() int {
	return xxx_messageInfo_MsgPlayerScoreGreatWin.Size(m)
}
func (m *MsgPlayerScoreGreatWin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPlayerScoreGreatWin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPlayerScoreGreatWin proto.InternalMessageInfo

func (m *MsgPlayerScoreGreatWin) GetBaseWinScore() int32 {
	if m != nil && m.BaseWinScore != nil {
		return *m.BaseWinScore
	}
	return 0
}

func (m *MsgPlayerScoreGreatWin) GetGreatWinType() int32 {
	if m != nil && m.GreatWinType != nil {
		return *m.GreatWinType
	}
	return 0
}

func (m *MsgPlayerScoreGreatWin) GetGreatWinPoints() int32 {
	if m != nil && m.GreatWinPoints != nil {
		return *m.GreatWinPoints
	}
	return 0
}

func (m *MsgPlayerScoreGreatWin) GetTrimGreatWinPoints() int32 {
	if m != nil && m.TrimGreatWinPoints != nil {
		return *m.TrimGreatWinPoints
	}
	return 0
}

func (m *MsgPlayerScoreGreatWin) GetContinuousBankerExtra() int32 {
	if m != nil && m.ContinuousBankerExtra != nil {
		return *m.ContinuousBankerExtra
	}
	return 0
}

// 小胡者的计分
type MsgPlayerScoreMiniWin struct {
	MiniWinType           *int32   `protobuf:"varint,1,req,name=miniWinType" json:"miniWinType,omitempty"`
	MiniWinBasicScore     *int32   `protobuf:"varint,2,req,name=miniWinBasicScore" json:"miniWinBasicScore,omitempty"`
	MiniWinFlowerScore    *int32   `protobuf:"varint,3,req,name=miniWinFlowerScore" json:"miniWinFlowerScore,omitempty"`
	MiniMultiple          *int32   `protobuf:"varint,4,req,name=miniMultiple" json:"miniMultiple,omitempty"`
	MiniWinTrimScore      *int32   `protobuf:"varint,5,req,name=miniWinTrimScore" json:"miniWinTrimScore,omitempty"`
	ContinuousBankerExtra *int32   `protobuf:"varint,6,opt,name=continuousBankerExtra" json:"continuousBankerExtra,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *MsgPlayerScoreMiniWin) Reset()         { *m = MsgPlayerScoreMiniWin{} }
func (m *MsgPlayerScoreMiniWin) String() string { return proto.CompactTextString(m) }
func (*MsgPlayerScoreMiniWin) ProtoMessage()    {}
func (*MsgPlayerScoreMiniWin) Descriptor() ([]byte, []int) {
	return fileDescriptor_116d3ec96f90ca98, []int{11}
}
func (m *MsgPlayerScoreMiniWin) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgPlayerScoreMiniWin.Unmarshal(m, b)
}
func (m *MsgPlayerScoreMiniWin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgPlayerScoreMiniWin.Marshal(b, m, deterministic)
}
func (m *MsgPlayerScoreMiniWin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPlayerScoreMiniWin.Merge(m, src)
}
func (m *MsgPlayerScoreMiniWin) XXX_Size() int {
	return xxx_messageInfo_MsgPlayerScoreMiniWin.Size(m)
}
func (m *MsgPlayerScoreMiniWin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPlayerScoreMiniWin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPlayerScoreMiniWin proto.InternalMessageInfo

func (m *MsgPlayerScoreMiniWin) GetMiniWinType() int32 {
	if m != nil && m.MiniWinType != nil {
		return *m.MiniWinType
	}
	return 0
}

func (m *MsgPlayerScoreMiniWin) GetMiniWinBasicScore() int32 {
	if m != nil && m.MiniWinBasicScore != nil {
		return *m.MiniWinBasicScore
	}
	return 0
}

func (m *MsgPlayerScoreMiniWin) GetMiniWinFlowerScore() int32 {
	if m != nil && m.MiniWinFlowerScore != nil {
		return *m.MiniWinFlowerScore
	}
	return 0
}

func (m *MsgPlayerScoreMiniWin) GetMiniMultiple() int32 {
	if m != nil && m.MiniMultiple != nil {
		return *m.MiniMultiple
	}
	return 0
}

func (m *MsgPlayerScoreMiniWin) GetMiniWinTrimScore() int32 {
	if m != nil && m.MiniWinTrimScore != nil {
		return *m.MiniWinTrimScore
	}
	return 0
}

func (m *MsgPlayerScoreMiniWin) GetContinuousBankerExtra() int32 {
	if m != nil && m.ContinuousBankerExtra != nil {
		return *m.ContinuousBankerExtra
	}
	return 0
}

// 一手牌结束后每个玩家的计分
type MsgPlayerScore struct {
	TargetChairID            *int32                  `protobuf:"varint,1,req,name=targetChairID" json:"targetChairID,omitempty"`
	WinType                  *int32                  `protobuf:"varint,2,req,name=winType" json:"winType,omitempty"`
	Score                    *int32                  `protobuf:"varint,3,req,name=score" json:"score,omitempty"`
	SpecialScore             *int32                  `protobuf:"varint,4,req,name=specialScore" json:"specialScore,omitempty"`
	GreatWin                 *MsgPlayerScoreGreatWin `protobuf:"bytes,5,opt,name=greatWin" json:"greatWin,omitempty"`
	MiniWin                  *MsgPlayerScoreMiniWin  `protobuf:"bytes,6,opt,name=miniWin" json:"miniWin,omitempty"`
	FakeWinScore             *int32                  `protobuf:"varint,7,opt,name=fakeWinScore" json:"fakeWinScore,omitempty"`
	FakeList                 []int32                 `protobuf:"varint,8,rep,name=fakeList" json:"fakeList,omitempty"`
	IsContinuousBanker       *bool                   `protobuf:"varint,9,opt,name=isContinuousBanker" json:"isContinuousBanker,omitempty"`
	ContinuousBankerMultiple *int32                  `protobuf:"varint,10,opt,name=continuousBankerMultiple" json:"continuousBankerMultiple,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                `json:"-"`
	XXX_unrecognized         []byte                  `json:"-"`
	XXX_sizecache            int32                   `json:"-"`
}

func (m *MsgPlayerScore) Reset()         { *m = MsgPlayerScore{} }
func (m *MsgPlayerScore) String() string { return proto.CompactTextString(m) }
func (*MsgPlayerScore) ProtoMessage()    {}
func (*MsgPlayerScore) Descriptor() ([]byte, []int) {
	return fileDescriptor_116d3ec96f90ca98, []int{12}
}
func (m *MsgPlayerScore) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgPlayerScore.Unmarshal(m, b)
}
func (m *MsgPlayerScore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgPlayerScore.Marshal(b, m, deterministic)
}
func (m *MsgPlayerScore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPlayerScore.Merge(m, src)
}
func (m *MsgPlayerScore) XXX_Size() int {
	return xxx_messageInfo_MsgPlayerScore.Size(m)
}
func (m *MsgPlayerScore) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPlayerScore.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPlayerScore proto.InternalMessageInfo

func (m *MsgPlayerScore) GetTargetChairID() int32 {
	if m != nil && m.TargetChairID != nil {
		return *m.TargetChairID
	}
	return 0
}

func (m *MsgPlayerScore) GetWinType() int32 {
	if m != nil && m.WinType != nil {
		return *m.WinType
	}
	return 0
}

func (m *MsgPlayerScore) GetScore() int32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *MsgPlayerScore) GetSpecialScore() int32 {
	if m != nil && m.SpecialScore != nil {
		return *m.SpecialScore
	}
	return 0
}

func (m *MsgPlayerScore) GetGreatWin() *MsgPlayerScoreGreatWin {
	if m != nil {
		return m.GreatWin
	}
	return nil
}

func (m *MsgPlayerScore) GetMiniWin() *MsgPlayerScoreMiniWin {
	if m != nil {
		return m.MiniWin
	}
	return nil
}

func (m *MsgPlayerScore) GetFakeWinScore() int32 {
	if m != nil && m.FakeWinScore != nil {
		return *m.FakeWinScore
	}
	return 0
}

func (m *MsgPlayerScore) GetFakeList() []int32 {
	if m != nil {
		return m.FakeList
	}
	return nil
}

func (m *MsgPlayerScore) GetIsContinuousBanker() bool {
	if m != nil && m.IsContinuousBanker != nil {
		return *m.IsContinuousBanker
	}
	return false
}

func (m *MsgPlayerScore) GetContinuousBankerMultiple() int32 {
	if m != nil && m.ContinuousBankerMultiple != nil {
		return *m.ContinuousBankerMultiple
	}
	return 0
}

// 一手牌结束后计分
type MsgHandScore struct {
	PlayerScores         []*MsgPlayerScore `protobuf:"bytes,1,rep,name=playerScores" json:"playerScores,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MsgHandScore) Reset()         { *m = MsgHandScore{} }
func (m *MsgHandScore) String() string { return proto.CompactTextString(m) }
func (*MsgHandScore) ProtoMessage()    {}
func (*MsgHandScore) Descriptor() ([]byte, []int) {
	return fileDescriptor_116d3ec96f90ca98, []int{13}
}
func (m *MsgHandScore) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgHandScore.Unmarshal(m, b)
}
func (m *MsgHandScore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgHandScore.Marshal(b, m, deterministic)
}
func (m *MsgHandScore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgHandScore.Merge(m, src)
}
func (m *MsgHandScore) XXX_Size() int {
	return xxx_messageInfo_MsgHandScore.Size(m)
}
func (m *MsgHandScore) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgHandScore.DiscardUnknown(m)
}

var xxx_messageInfo_MsgHandScore proto.InternalMessageInfo

func (m *MsgHandScore) GetPlayerScores() []*MsgPlayerScore {
	if m != nil {
		return m.PlayerScores
	}
	return nil
}

// 一手牌结束通知
type MsgHandOver struct {
	EndType              *int32               `protobuf:"varint,1,req,name=endType" json:"endType,omitempty"`
	PlayerTileLists      []*MsgPlayerTileList `protobuf:"bytes,2,rep,name=playerTileLists" json:"playerTileLists,omitempty"`
	Scores               *MsgHandScore        `protobuf:"bytes,3,opt,name=scores" json:"scores,omitempty"`
	ContinueAble         *bool                `protobuf:"varint,4,opt,name=continueAble" json:"continueAble,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *MsgHandOver) Reset()         { *m = MsgHandOver{} }
func (m *MsgHandOver) String() string { return proto.CompactTextString(m) }
func (*MsgHandOver) ProtoMessage()    {}
func (*MsgHandOver) Descriptor() ([]byte, []int) {
	return fileDescriptor_116d3ec96f90ca98, []int{14}
}
func (m *MsgHandOver) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgHandOver.Unmarshal(m, b)
}
func (m *MsgHandOver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgHandOver.Marshal(b, m, deterministic)
}
func (m *MsgHandOver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgHandOver.Merge(m, src)
}
func (m *MsgHandOver) XXX_Size() int {
	return xxx_messageInfo_MsgHandOver.Size(m)
}
func (m *MsgHandOver) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgHandOver.DiscardUnknown(m)
}

var xxx_messageInfo_MsgHandOver proto.InternalMessageInfo

func (m *MsgHandOver) GetEndType() int32 {
	if m != nil && m.EndType != nil {
		return *m.EndType
	}
	return 0
}

func (m *MsgHandOver) GetPlayerTileLists() []*MsgPlayerTileList {
	if m != nil {
		return m.PlayerTileLists
	}
	return nil
}

func (m *MsgHandOver) GetScores() *MsgHandScore {
	if m != nil {
		return m.Scores
	}
	return nil
}

func (m *MsgHandOver) GetContinueAble() bool {
	if m != nil && m.ContinueAble != nil {
		return *m.ContinueAble
	}
	return false
}

// 更新玩家的GPS定位信息
type MsgUpdateLocation struct {
	UserID               *string  `protobuf:"bytes,1,req,name=userID" json:"userID,omitempty"`
	Location             *string  `protobuf:"bytes,2,req,name=location" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgUpdateLocation) Reset()         { *m = MsgUpdateLocation{} }
func (m *MsgUpdateLocation) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateLocation) ProtoMessage()    {}
func (*MsgUpdateLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_116d3ec96f90ca98, []int{15}
}
func (m *MsgUpdateLocation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgUpdateLocation.Unmarshal(m, b)
}
func (m *MsgUpdateLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgUpdateLocation.Marshal(b, m, deterministic)
}
func (m *MsgUpdateLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateLocation.Merge(m, src)
}
func (m *MsgUpdateLocation) XXX_Size() int {
	return xxx_messageInfo_MsgUpdateLocation.Size(m)
}
func (m *MsgUpdateLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateLocation.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateLocation proto.InternalMessageInfo

func (m *MsgUpdateLocation) GetUserID() string {
	if m != nil && m.UserID != nil {
		return *m.UserID
	}
	return ""
}

func (m *MsgUpdateLocation) GetLocation() string {
	if m != nil && m.Location != nil {
		return *m.Location
	}
	return ""
}

// 更新牌局内的道具配置
type MsgUpdatePropCfg struct {
	PropCfg              *string  `protobuf:"bytes,1,req,name=propCfg" json:"propCfg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgUpdatePropCfg) Reset()         { *m = MsgUpdatePropCfg{} }
func (m *MsgUpdatePropCfg) String() string { return proto.CompactTextString(m) }
func (*MsgUpdatePropCfg) ProtoMessage()    {}
func (*MsgUpdatePropCfg) Descriptor() ([]byte, []int) {
	return fileDescriptor_116d3ec96f90ca98, []int{16}
}
func (m *MsgUpdatePropCfg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgUpdatePropCfg.Unmarshal(m, b)
}
func (m *MsgUpdatePropCfg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgUpdatePropCfg.Marshal(b, m, deterministic)
}
func (m *MsgUpdatePropCfg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdatePropCfg.Merge(m, src)
}
func (m *MsgUpdatePropCfg) XXX_Size() int {
	return xxx_messageInfo_MsgUpdatePropCfg.Size(m)
}
func (m *MsgUpdatePropCfg) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdatePropCfg.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdatePropCfg proto.InternalMessageInfo

func (m *MsgUpdatePropCfg) GetPropCfg() string {
	if m != nil && m.PropCfg != nil {
		return *m.PropCfg
	}
	return ""
}

func init() {
	proto.RegisterType((*GameMessage)(nil), "mahjong.GameMessage")
	proto.RegisterType((*MsgMeldTile)(nil), "mahjong.MsgMeldTile")
	proto.RegisterType((*MsgPlayerTileList)(nil), "mahjong.MsgPlayerTileList")
	proto.RegisterType((*MsgDeal)(nil), "mahjong.MsgDeal")
	proto.RegisterType((*MsgReadyHandTips)(nil), "mahjong.MsgReadyHandTips")
	proto.RegisterType((*MsgAllowPlayerAction)(nil), "mahjong.MsgAllowPlayerAction")
	proto.RegisterType((*MsgAllowPlayerReAction)(nil), "mahjong.MsgAllowPlayerReAction")
	proto.RegisterType((*MsgPlayerAction)(nil), "mahjong.MsgPlayerAction")
	proto.RegisterType((*MsgActionResultNotify)(nil), "mahjong.MsgActionResultNotify")
	proto.RegisterType((*MsgRestore)(nil), "mahjong.MsgRestore")
	proto.RegisterType((*MsgPlayerScoreGreatWin)(nil), "mahjong.MsgPlayerScoreGreatWin")
	proto.RegisterType((*MsgPlayerScoreMiniWin)(nil), "mahjong.MsgPlayerScoreMiniWin")
	proto.RegisterType((*MsgPlayerScore)(nil), "mahjong.MsgPlayerScore")
	proto.RegisterType((*MsgHandScore)(nil), "mahjong.MsgHandScore")
	proto.RegisterType((*MsgHandOver)(nil), "mahjong.MsgHandOver")
	proto.RegisterType((*MsgUpdateLocation)(nil), "mahjong.MsgUpdateLocation")
	proto.RegisterType((*MsgUpdatePropCfg)(nil), "mahjong.MsgUpdatePropCfg")
	proto.RegisterEnum("mahjong.TileID", TileID_name, TileID_value)
	proto.RegisterEnum("mahjong.MessageCode", MessageCode_name, MessageCode_value)
	proto.RegisterEnum("mahjong.MeldType", MeldType_name, MeldType_value)
	proto.RegisterEnum("mahjong.ActionType", ActionType_name, ActionType_value)
	proto.RegisterEnum("mahjong.HandOverType", HandOverType_name, HandOverType_value)
}

func init() { proto.RegisterFile("game_mahjong.proto", fileDescriptor_116d3ec96f90ca98) }

var fileDescriptor_116d3ec96f90ca98 = []byte{
	// 1891 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x4b, 0x53, 0xe3, 0xca,
	0x15, 0x1e, 0xbf, 0xcd, 0xf1, 0x83, 0x43, 0x63, 0x40, 0xc0, 0x30, 0xe3, 0xf1, 0xe4, 0x26, 0x84,
	0x4a, 0x6e, 0x82, 0xe7, 0xbd, 0x48, 0xd5, 0x35, 0x36, 0x03, 0x2e, 0x90, 0xed, 0xb2, 0xa1, 0x9c,
	0xac, 0x28, 0x61, 0x37, 0xa6, 0x83, 0x2c, 0xf9, 0xaa, 0xe5, 0xf1, 0xb0, 0xf3, 0x4f, 0xb8, 0xbb,
	0x2c, 0xb2, 0xc9, 0x2e, 0xfb, 0x6c, 0xb3, 0xcb, 0xf2, 0x56, 0xa5, 0x2a, 0xbf, 0x24, 0xbf, 0x21,
	0xd5, 0xdd, 0x12, 0x48, 0xc2, 0xbe, 0x59, 0xdd, 0x9d, 0xf5, 0x9d, 0xee, 0x3e, 0xdf, 0xf9, 0xce,
	0xa3, 0xdb, 0x40, 0x46, 0xc6, 0x98, 0x5e, 0x8d, 0x8d, 0xdb, 0x3f, 0xdb, 0xd6, 0xe8, 0xdb, 0x89,
	0x63, 0xbb, 0x36, 0xc9, 0x78, 0x9f, 0x95, 0x7d, 0xc8, 0x9d, 0x18, 0x63, 0xaa, 0x53, 0xce, 0x8d,
	0x11, 0x25, 0x39, 0x48, 0xb4, 0x27, 0x5c, 0x8b, 0x95, 0xe3, 0xfb, 0x29, 0x92, 0x87, 0x64, 0xc3,
	0x70, 0x0d, 0x2d, 0x5e, 0x8e, 0xed, 0xe7, 0x2b, 0x97, 0x90, 0xd3, 0xf9, 0x48, 0xa7, 0xe6, 0xf0,
	0x82, 0x99, 0x94, 0x20, 0x64, 0xc7, 0xe2, 0xf7, 0xfd, 0x84, 0x7a, 0xcb, 0x0b, 0x90, 0x72, 0x99,
	0x49, 0x0f, 0xb5, 0xb8, 0xfc, 0x5c, 0x87, 0xdc, 0xc0, 0xb6, 0x5c, 0x87, 0x5d, 0x4f, 0x5d, 0xdb,
	0xd1, 0x12, 0xe5, 0xd8, 0x7e, 0x4a, 0xec, 0x1a, 0xdc, 0xda, 0x33, 0x71, 0x82, 0x96, 0x14, 0x48,
	0xe5, 0x6f, 0x31, 0x58, 0xd3, 0xf9, 0xa8, 0x63, 0x1a, 0xf7, 0xd4, 0x11, 0xf8, 0x39, 0xe3, 0x2e,
	0x59, 0x85, 0xcc, 0xe0, 0xd6, 0x60, 0x4e, 0xb3, 0xe1, 0x1d, 0xbe, 0x05, 0xab, 0xe2, 0xf0, 0xba,
	0x3d, 0xb5, 0xdc, 0xa6, 0x75, 0x6a, 0x58, 0x43, 0xcf, 0xcd, 0x1a, 0xac, 0x08, 0x03, 0x97, 0x50,
	0xa2, 0x9c, 0x50, 0x9e, 0x25, 0xf4, 0xd9, 0xb4, 0x67, 0xd4, 0xd1, 0x92, 0x12, 0x2c, 0x41, 0x5e,
	0x82, 0x0d, 0xc6, 0x07, 0x86, 0x33, 0xd4, 0x52, 0x12, 0x7d, 0x0d, 0x29, 0x11, 0x05, 0xd7, 0xd2,
	0xe5, 0xc4, 0x7e, 0xae, 0x5a, 0xfa, 0xd6, 0x97, 0x29, 0x10, 0x6a, 0xe5, 0xc7, 0x18, 0x64, 0x74,
	0x3e, 0x6a, 0x50, 0xc3, 0x24, 0x1b, 0x50, 0xb8, 0x36, 0xac, 0x3b, 0xea, 0xd4, 0x43, 0xf4, 0x4a,
	0x90, 0x9f, 0x31, 0x6b, 0xa8, 0x3c, 0x36, 0x1b, 0x1e, 0xb7, 0x37, 0xb0, 0x3a, 0x09, 0xc5, 0xc5,
	0x25, 0xc3, 0x5c, 0x75, 0x27, 0xe8, 0x27, 0x12, 0xba, 0xcf, 0xbe, 0x69, 0xf5, 0x0d, 0xd3, 0xd4,
	0x92, 0xbe, 0xb6, 0x43, 0x36, 0xa0, 0x87, 0x5a, 0x4a, 0xca, 0xe8, 0x7d, 0x56, 0xb5, 0xb4, 0xfc,
	0xdc, 0x01, 0xc2, 0x78, 0xdd, 0xb6, 0x5c, 0x66, 0x4d, 0xed, 0x29, 0x3f, 0x92, 0x04, 0xb5, 0x4c,
	0x39, 0xb6, 0x9f, 0x25, 0x45, 0x48, 0x8f, 0x0d, 0xe7, 0x6e, 0x3a, 0xd1, 0xb2, 0x52, 0xef, 0x3f,
	0x00, 0xea, 0x7c, 0xd4, 0xa5, 0xc6, 0xf0, 0x5e, 0x48, 0x76, 0xc1, 0x26, 0x9c, 0x10, 0x00, 0xd7,
	0x70, 0x46, 0xd4, 0x95, 0x79, 0x51, 0x11, 0x6d, 0x40, 0xc1, 0xf1, 0x17, 0x09, 0x5e, 0x5a, 0x5c,
	0x08, 0x56, 0xf9, 0x4f, 0x0c, 0x4a, 0x3a, 0x1f, 0xd5, 0x4c, 0xd3, 0x9e, 0x29, 0xe2, 0xb5, 0x81,
	0xcb, 0x6c, 0x4b, 0x64, 0xec, 0x7b, 0xa3, 0x69, 0x0d, 0xe9, 0xd7, 0xc7, 0x03, 0x0c, 0x69, 0xf2,
	0x95, 0x52, 0x9a, 0x6c, 0x42, 0xd1, 0x10, 0x9b, 0xe9, 0x50, 0x6d, 0x14, 0x92, 0x08, 0x5c, 0x03,
	0x74, 0xd9, 0x98, 0xda, 0x53, 0xb7, 0x69, 0xf5, 0xe8, 0xc0, 0xb6, 0x86, 0x5c, 0x55, 0x08, 0xf9,
	0x3d, 0x14, 0x5c, 0x36, 0xe1, 0x9f, 0x6d, 0xcf, 0x95, 0x4c, 0x5d, 0xae, 0xba, 0x1d, 0xd4, 0x30,
	0x1c, 0xcf, 0x6f, 0xa0, 0x28, 0xb3, 0xfa, 0xb8, 0xe5, 0xa7, 0xd2, 0xfb, 0xef, 0x18, 0x6c, 0x86,
	0x43, 0xea, 0xd2, 0x9f, 0x3d, 0xa8, 0xa7, 0x14, 0x53, 0xcb, 0x29, 0x8a, 0xf2, 0xfa, 0xc2, 0x06,
	0x2e, 0x1b, 0x8b, 0xaf, 0x66, 0x43, 0x4b, 0xfb, 0x64, 0x14, 0xea, 0x93, 0xc9, 0x08, 0xb8, 0xe2,
	0xc2, 0xea, 0x43, 0x55, 0x2d, 0x8b, 0xa3, 0x08, 0x69, 0x15, 0x87, 0x17, 0x40, 0x01, 0x52, 0x37,
	0xa6, 0x31, 0xe2, 0x5e, 0x9b, 0xe6, 0x21, 0xe9, 0x3e, 0xb4, 0x68, 0xa8, 0xd5, 0x55, 0xfd, 0xad,
	0xc1, 0xca, 0xd8, 0xe3, 0x76, 0xa8, 0x6a, 0xb0, 0xf2, 0xaf, 0x18, 0x6c, 0x08, 0x15, 0xe5, 0xa9,
	0x5d, 0xca, 0xa7, 0xa6, 0xdb, 0xb2, 0x5d, 0x76, 0x73, 0x2f, 0x68, 0xaa, 0xea, 0x0a, 0xb7, 0x4c,
	0x94, 0x02, 0x01, 0x50, 0xdf, 0xb2, 0x08, 0x15, 0x8f, 0x7d, 0x1f, 0x13, 0x4a, 0x48, 0x36, 0xcb,
	0x14, 0x22, 0x00, 0x16, 0x9d, 0xa9, 0xfe, 0xe3, 0x5e, 0x73, 0x47, 0x3a, 0x49, 0xf5, 0xca, 0x2e,
	0xac, 0xcf, 0x0c, 0xe6, 0x7a, 0x63, 0xc0, 0xcf, 0xb4, 0x6a, 0x16, 0x11, 0x04, 0xc8, 0x6a, 0xe2,
	0xae, 0xed, 0x50, 0xf2, 0x0a, 0x32, 0x63, 0xd5, 0xf7, 0x92, 0x73, 0xae, 0x8a, 0x41, 0xdf, 0x72,
	0x1e, 0x6c, 0xc1, 0xea, 0x43, 0x9b, 0xc8, 0xf8, 0xb8, 0x6a, 0x14, 0xe1, 0xc7, 0x34, 0xb8, 0xe7,
	0x87, 0x0e, 0xfd, 0xd8, 0x55, 0x5c, 0xeb, 0x90, 0x63, 0x5c, 0xa7, 0x2d, 0x3a, 0x6b, 0x38, 0xc6,
	0x4c, 0x06, 0x96, 0x5d, 0xc6, 0x2c, 0x25, 0x8d, 0x3b, 0x40, 0x6e, 0xcc, 0xfb, 0x6e, 0xc4, 0x55,
	0x5a, 0xba, 0x2a, 0x40, 0x8a, 0x7e, 0x75, 0x1d, 0x43, 0x06, 0x91, 0xaf, 0xfc, 0x45, 0xd5, 0xb3,
	0x2a, 0x80, 0xde, 0xc0, 0x76, 0xe8, 0x89, 0x43, 0x0d, 0xb7, 0xcf, 0x2c, 0x51, 0x47, 0xd7, 0x06,
	0xa7, 0x7d, 0x66, 0x49, 0xfc, 0x71, 0x78, 0x8d, 0xbc, 0x15, 0x32, 0xc7, 0x0f, 0x35, 0xed, 0xa3,
	0x1d, 0x9b, 0x59, 0xae, 0x5f, 0xd3, 0x3b, 0x40, 0x5c, 0x87, 0x8d, 0x4f, 0xc2, 0x36, 0x35, 0xa6,
	0xf6, 0x60, 0x63, 0x10, 0x19, 0x43, 0xc7, 0x92, 0x99, 0x2c, 0x9b, 0xca, 0x3f, 0x54, 0x8d, 0x04,
	0x98, 0xe9, 0xcc, 0x62, 0x82, 0xd8, 0x3a, 0xe4, 0xc6, 0xea, 0x67, 0xe0, 0x42, 0xd9, 0x86, 0x35,
	0x0f, 0x3c, 0x32, 0x38, 0x1b, 0x28, 0xca, 0x71, 0x9f, 0x84, 0x67, 0x52, 0x29, 0x57, 0xb6, 0x84,
	0x1f, 0x8e, 0xb0, 0xe9, 0x53, 0xd3, 0x65, 0x13, 0x59, 0xc4, 0x5e, 0x2b, 0xfa, 0x1e, 0x1c, 0x36,
	0x56, 0xeb, 0x53, 0x3f, 0x4d, 0x5a, 0x15, 0xf6, 0xdf, 0xe3, 0x50, 0x0c, 0x93, 0x5e, 0x56, 0xd1,
	0xab, 0x90, 0x99, 0x85, 0x24, 0x2c, 0x40, 0x8a, 0x87, 0x89, 0xf1, 0x09, 0x1d, 0x30, 0xc3, 0x54,
	0xee, 0x15, 0xb1, 0x43, 0xc8, 0xfa, 0x3a, 0x4b, 0x99, 0x72, 0xd5, 0x97, 0x4f, 0x6f, 0x87, 0x70,
	0x1a, 0x7f, 0x07, 0x19, 0x2f, 0x16, 0xc9, 0x31, 0x57, 0x7d, 0xb1, 0x64, 0x87, 0x2f, 0x6f, 0x09,
	0xf2, 0x37, 0xc6, 0xdd, 0x63, 0xde, 0x33, 0x7e, 0x5f, 0x0b, 0x54, 0x4e, 0xf7, 0xac, 0xac, 0xa4,
	0xc5, 0x17, 0xc9, 0x8a, 0xac, 0xc0, 0x32, 0x68, 0x51, 0x99, 0x1e, 0x24, 0x06, 0xef, 0x6a, 0xc9,
	0xeb, 0x7c, 0x24, 0xca, 0x53, 0xc9, 0xf4, 0x5b, 0xc8, 0x4f, 0x1e, 0xb9, 0x88, 0x57, 0x85, 0x98,
	0x70, 0x5b, 0x4b, 0xb8, 0x56, 0x7e, 0x88, 0xc9, 0x17, 0x86, 0xd8, 0xdf, 0xfe, 0x42, 0x1d, 0x21,
	0x27, 0xb5, 0x82, 0x0f, 0x8c, 0x05, 0xd7, 0x69, 0xfc, 0xff, 0x5e, 0xa7, 0xdf, 0x40, 0x9a, 0x2b,
	0xf7, 0x09, 0x29, 0xd5, 0x46, 0x70, 0xed, 0x23, 0xd7, 0x12, 0xe4, 0xbd, 0xe8, 0x68, 0xed, 0xda,
	0x9b, 0x7c, 0xd9, 0xca, 0x3b, 0xf9, 0x36, 0xb9, 0x9c, 0x0c, 0x0d, 0x97, 0x9e, 0xdb, 0x03, 0x43,
	0x0e, 0xd3, 0x22, 0xa4, 0xa7, 0x9c, 0xfa, 0x69, 0x5f, 0x11, 0x32, 0x9a, 0x9e, 0x4d, 0xe6, 0x7d,
	0xa5, 0xf2, 0x5a, 0xde, 0xb1, 0x6a, 0x5b, 0xc7, 0xb1, 0x27, 0xf5, 0x9b, 0x91, 0x88, 0x66, 0xa2,
	0x7e, 0xaa, 0x6d, 0x07, 0x7f, 0x4d, 0x43, 0x5a, 0x8d, 0x73, 0x82, 0x90, 0xa7, 0xd6, 0x74, 0x7c,
	0xc1, 0x86, 0x57, 0x7a, 0xad, 0x75, 0x88, 0xcf, 0x22, 0x48, 0x15, 0x63, 0x11, 0xe4, 0x0d, 0xc6,
	0x23, 0xc8, 0x5b, 0x4c, 0x44, 0x90, 0x77, 0x98, 0x8c, 0x20, 0xef, 0x31, 0x15, 0x41, 0x3e, 0x60,
	0x3a, 0x82, 0x7c, 0xc4, 0x4c, 0x04, 0xf9, 0x84, 0xd9, 0x20, 0xd2, 0x69, 0xb6, 0x0e, 0x71, 0x25,
	0x82, 0x54, 0x11, 0x22, 0xc8, 0x1b, 0xcc, 0x45, 0x90, 0xb7, 0x98, 0x8f, 0x20, 0xef, 0xb0, 0x10,
	0x41, 0xde, 0x63, 0x31, 0x82, 0x7c, 0xc0, 0xd5, 0x08, 0xf2, 0x11, 0x31, 0x82, 0x7c, 0xc2, 0xb5,
	0x20, 0xd2, 0x6b, 0x5f, 0x1e, 0x22, 0x89, 0x20, 0x55, 0x5c, 0x8f, 0x20, 0x6f, 0xb0, 0x14, 0x41,
	0xde, 0xe2, 0x46, 0x04, 0x79, 0x87, 0x9b, 0x11, 0xe4, 0x3d, 0x6e, 0x45, 0x90, 0x0f, 0xa8, 0x45,
	0x90, 0x8f, 0xb8, 0x1d, 0x41, 0x3e, 0xe1, 0x0e, 0x59, 0x85, 0x9c, 0x8f, 0x5c, 0xb4, 0x5b, 0xb8,
	0x1b, 0x04, 0x5a, 0xb5, 0x16, 0x3e, 0x0f, 0x02, 0xbd, 0xd3, 0x1a, 0xee, 0x05, 0x81, 0xce, 0x71,
	0x13, 0x5f, 0x04, 0x81, 0xd3, 0xda, 0x19, 0xbe, 0x0c, 0x03, 0x17, 0x58, 0x0e, 0x02, 0xf5, 0xd3,
	0x4b, 0x7c, 0x15, 0x92, 0xea, 0xfc, 0x52, 0xc7, 0x0a, 0x21, 0x50, 0xf4, 0x91, 0x76, 0xb7, 0x7e,
	0xda, 0x6c, 0xe0, 0xeb, 0x20, 0x76, 0x54, 0xd3, 0x8f, 0xda, 0x6d, 0xfc, 0x05, 0xd9, 0x86, 0x8d,
	0xc7, 0xa3, 0xba, 0x7f, 0xea, 0xd5, 0x5a, 0x17, 0xa7, 0xc7, 0xfa, 0xa5, 0x8e, 0xdf, 0x04, 0x97,
	0xf7, 0x3a, 0xdd, 0x66, 0xeb, 0x04, 0x7f, 0x19, 0xc2, 0x2e, 0x75, 0xfd, 0xb8, 0x8b, 0xbf, 0x0a,
	0x62, 0xb5, 0xcb, 0x8b, 0x4b, 0xbd, 0x85, 0xfb, 0x41, 0xac, 0xdf, 0x6c, 0x5d, 0x1c, 0x77, 0xf1,
	0xd7, 0x41, 0xd6, 0x7a, 0xed, 0x8f, 0x78, 0x70, 0xf0, 0xcf, 0x04, 0xe4, 0xbc, 0x3f, 0x25, 0x75,
	0x7b, 0x48, 0x49, 0x01, 0x56, 0xda, 0x9d, 0xa6, 0xf5, 0xc5, 0x30, 0xd9, 0x10, 0x9f, 0x91, 0x3c,
	0x64, 0xdb, 0x1d, 0x75, 0x41, 0x62, 0x8c, 0x68, 0x50, 0xf2, 0xbf, 0x82, 0x2f, 0x0f, 0x8c, 0x93,
	0x75, 0x58, 0xf5, 0x2d, 0x35, 0xf5, 0x40, 0xc3, 0x04, 0xd9, 0x80, 0xb5, 0x76, 0xc7, 0xbf, 0x5f,
	0x7d, 0x38, 0x45, 0x00, 0xd2, 0xed, 0x8e, 0xb8, 0xd4, 0x31, 0x4d, 0x8a, 0x00, 0xed, 0x8e, 0x3f,
	0x89, 0x30, 0xa3, 0xdc, 0x7b, 0xcf, 0x02, 0xcc, 0xaa, 0x13, 0xd4, 0xa0, 0x39, 0xa7, 0xc6, 0x17,
	0xda, 0xb5, 0xed, 0x31, 0xae, 0x04, 0xe1, 0x63, 0xcb, 0xa5, 0x8e, 0x84, 0x81, 0x94, 0x00, 0xdb,
	0x9d, 0x06, 0xe3, 0xd7, 0x86, 0x35, 0xec, 0xd2, 0xef, 0xa7, 0x94, 0xbb, 0x98, 0x53, 0xd4, 0x3c,
	0xd4, 0xe3, 0x9b, 0x0f, 0x81, 0x35, 0x8b, 0xcf, 0xa8, 0x83, 0x05, 0xb2, 0x06, 0x05, 0xff, 0x58,
	0xf9, 0x00, 0xc0, 0xa2, 0x82, 0xc4, 0xf1, 0x0d, 0x6a, 0x52, 0x97, 0x0e, 0x55, 0x93, 0x28, 0x48,
	0xcd, 0x1d, 0x44, 0x21, 0xb4, 0x42, 0x7a, 0xf2, 0x2f, 0xd7, 0x84, 0xe3, 0x9a, 0x0a, 0x4c, 0xfc,
	0xe3, 0x93, 0x81, 0x11, 0x15, 0xd8, 0x19, 0x1b, 0xdc, 0xd9, 0x53, 0x17, 0xd7, 0x95, 0xae, 0x0d,
	0xdb, 0x12, 0x07, 0x94, 0x14, 0xf1, 0xf0, 0xf4, 0xc3, 0x0d, 0xb5, 0xa6, 0x7a, 0x6e, 0x5f, 0x5f,
	0xdf, 0xe3, 0xa6, 0x62, 0x1c, 0x1a, 0x75, 0xb8, 0x75, 0xf0, 0x43, 0x1c, 0xb2, 0xba, 0xf7, 0x64,
	0x14, 0xd9, 0x11, 0xb9, 0xf5, 0xbf, 0x7b, 0x42, 0x01, 0x6b, 0x40, 0xf1, 0x19, 0xd9, 0x82, 0xf5,
	0xa0, 0xe5, 0xc2, 0x11, 0x97, 0x89, 0x8b, 0x31, 0xb2, 0x0b, 0x5b, 0x41, 0xc3, 0xf1, 0xd7, 0x89,
	0xcd, 0xe9, 0xf0, 0xcc, 0xb6, 0x46, 0x18, 0x27, 0xcf, 0x41, 0x5b, 0xb0, 0xab, 0x2a, 0xad, 0x09,
	0xb2, 0x07, 0xdb, 0x41, 0x6b, 0xdd, 0xb6, 0x06, 0xd4, 0x30, 0xbd, 0xcd, 0xc9, 0xa7, 0x64, 0xcc,
	0x1b, 0xf1, 0x1b, 0xc5, 0x6b, 0x7a, 0x2d, 0xb4, 0xf1, 0x76, 0x7a, 0x7a, 0x8a, 0x69, 0xb2, 0x09,
	0xe4, 0x09, 0x7c, 0x88, 0x19, 0xa1, 0x4d, 0x10, 0xef, 0x33, 0x6b, 0x88, 0xd9, 0xe8, 0xf1, 0x1d,
	0x83, 0x39, 0xd2, 0xf1, 0xca, 0xc1, 0x7f, 0x13, 0x00, 0xaa, 0xe2, 0xa4, 0x28, 0x5e, 0xe8, 0x8f,
	0xc8, 0x55, 0xef, 0xac, 0xd9, 0xc1, 0x18, 0xd9, 0x81, 0xcd, 0x88, 0xa1, 0xd1, 0xec, 0xd5, 0x6b,
	0xdd, 0x06, 0xc6, 0x17, 0x6c, 0x6a, 0x74, 0x6b, 0x7d, 0x4c, 0x2e, 0x30, 0xd4, 0x4f, 0xdb, 0x7d,
	0xcc, 0x2e, 0x30, 0x74, 0xda, 0xad, 0x13, 0x44, 0xf2, 0x12, 0x76, 0x23, 0x86, 0xb3, 0x76, 0xeb,
	0xe4, 0xca, 0x53, 0x1a, 0xcb, 0xe4, 0x15, 0xec, 0x2d, 0x5a, 0xf0, 0xa0, 0x27, 0x7e, 0x47, 0xf6,
	0x54, 0x22, 0x02, 0x4b, 0xfa, 0xcd, 0xd6, 0x55, 0xfd, 0x76, 0x3a, 0xb8, 0xc3, 0x79, 0x8c, 0xbc,
	0x82, 0xe7, 0x0b, 0xcc, 0x42, 0x71, 0xf1, 0xe8, 0xb5, 0x70, 0x1e, 0x5f, 0xb0, 0x44, 0x3a, 0xf1,
	0x53, 0x8a, 0xf3, 0x24, 0xa9, 0x3c, 0xe1, 0xf1, 0x99, 0x39, 0xdc, 0x7d, 0x78, 0x09, 0xe3, 0x3c,
	0xbb, 0x80, 0x48, 0xc0, 0x8c, 0x64, 0xf7, 0x89, 0xa4, 0xf5, 0x29, 0x77, 0xed, 0x71, 0x0d, 0xe7,
	0xe5, 0xa5, 0xc6, 0x23, 0x9c, 0x7f, 0x47, 0x9e, 0x2f, 0x31, 0xd6, 0x71, 0x3e, 0x8f, 0x2d, 0xb5,
	0x36, 0x70, 0x3e, 0x8f, 0x1f, 0xfc, 0x18, 0x83, 0xbc, 0x3f, 0x41, 0x64, 0xca, 0xbd, 0x71, 0x1a,
	0xc4, 0xae, 0x5a, 0xb6, 0x25, 0x1a, 0xa1, 0x02, 0x2f, 0x9e, 0x98, 0xfa, 0xcc, 0x0a, 0x88, 0x15,
	0x23, 0x2f, 0x60, 0x67, 0xe1, 0x1a, 0xa5, 0xf7, 0x43, 0x5b, 0x84, 0xec, 0xd2, 0x46, 0x1d, 0x4c,
	0xf8, 0x1d, 0x15, 0xb2, 0x8a, 0xca, 0xa4, 0x0e, 0x26, 0x49, 0x59, 0xa5, 0xe1, 0xc9, 0xd1, 0x5d,
	0xfb, 0x5a, 0x56, 0x6f, 0xea, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa5, 0x48, 0xb7, 0x91, 0x44,
	0x12, 0x00, 0x00,
}
