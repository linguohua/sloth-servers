// Code generated by protoc-gen-go. DO NOT EDIT.
// source: game_pokerface_s2s.proto

package pokerface

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 记录的动作的标志
type SRFlags int32

const (
	// 普通动作记录
	SRFlags_SRNone SRFlags = 0
	// 该动作仅表示玩家选择了操作
	// 但服务器不一定采纳
	SRFlags_SRUserReplyOnly SRFlags = 1
	// 表明动作伴随着听牌，主要用于庄家起手听牌
	SRFlags_SRRichi    SRFlags = 2
	SRFlags_SRFlyRichi SRFlags = 4
)

var SRFlags_name = map[int32]string{
	0: "SRNone",
	1: "SRUserReplyOnly",
	2: "SRRichi",
	4: "SRFlyRichi",
}

var SRFlags_value = map[string]int32{
	"SRNone":          0,
	"SRUserReplyOnly": 1,
	"SRRichi":         2,
	"SRFlyRichi":      4,
}

func (x SRFlags) Enum() *SRFlags {
	p := new(SRFlags)
	*p = x
	return p
}

func (x SRFlags) String() string {
	return proto.EnumName(SRFlags_name, int32(x))
}

func (x *SRFlags) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SRFlags_value, data, "SRFlags")
	if err != nil {
		return err
	}
	*x = SRFlags(value)
	return nil
}

func (SRFlags) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0786ddba798afdac, []int{0}
}

// 手牌记录中的用户对象
type SRMsgPlayerInfo struct {
	UserID               *string  `protobuf:"bytes,1,req,name=userID" json:"userID,omitempty"`
	ChairID              *int32   `protobuf:"varint,2,req,name=chairID" json:"chairID,omitempty"`
	Nick                 *string  `protobuf:"bytes,3,opt,name=nick" json:"nick,omitempty"`
	Gender               *uint32  `protobuf:"varint,4,opt,name=gender" json:"gender,omitempty"`
	HeadIconURI          *string  `protobuf:"bytes,5,opt,name=headIconURI" json:"headIconURI,omitempty"`
	AvatarID             *int32   `protobuf:"varint,6,opt,name=avatarID" json:"avatarID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SRMsgPlayerInfo) Reset()         { *m = SRMsgPlayerInfo{} }
func (m *SRMsgPlayerInfo) String() string { return proto.CompactTextString(m) }
func (*SRMsgPlayerInfo) ProtoMessage()    {}
func (*SRMsgPlayerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0786ddba798afdac, []int{0}
}
func (m *SRMsgPlayerInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SRMsgPlayerInfo.Unmarshal(m, b)
}
func (m *SRMsgPlayerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SRMsgPlayerInfo.Marshal(b, m, deterministic)
}
func (m *SRMsgPlayerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SRMsgPlayerInfo.Merge(m, src)
}
func (m *SRMsgPlayerInfo) XXX_Size() int {
	return xxx_messageInfo_SRMsgPlayerInfo.Size(m)
}
func (m *SRMsgPlayerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SRMsgPlayerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SRMsgPlayerInfo proto.InternalMessageInfo

func (m *SRMsgPlayerInfo) GetUserID() string {
	if m != nil && m.UserID != nil {
		return *m.UserID
	}
	return ""
}

func (m *SRMsgPlayerInfo) GetChairID() int32 {
	if m != nil && m.ChairID != nil {
		return *m.ChairID
	}
	return 0
}

func (m *SRMsgPlayerInfo) GetNick() string {
	if m != nil && m.Nick != nil {
		return *m.Nick
	}
	return ""
}

func (m *SRMsgPlayerInfo) GetGender() uint32 {
	if m != nil && m.Gender != nil {
		return *m.Gender
	}
	return 0
}

func (m *SRMsgPlayerInfo) GetHeadIconURI() string {
	if m != nil && m.HeadIconURI != nil {
		return *m.HeadIconURI
	}
	return ""
}

func (m *SRMsgPlayerInfo) GetAvatarID() int32 {
	if m != nil && m.AvatarID != nil {
		return *m.AvatarID
	}
	return 0
}

// 发牌记录
type SRDealDetail struct {
	ChairID              *int32   `protobuf:"varint,1,req,name=chairID" json:"chairID,omitempty"`
	CardsHand            []int32  `protobuf:"varint,2,rep,name=cardsHand" json:"cardsHand,omitempty"`
	CardsFlower          []int32  `protobuf:"varint,3,rep,name=cardsFlower" json:"cardsFlower,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SRDealDetail) Reset()         { *m = SRDealDetail{} }
func (m *SRDealDetail) String() string { return proto.CompactTextString(m) }
func (*SRDealDetail) ProtoMessage()    {}
func (*SRDealDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_0786ddba798afdac, []int{1}
}
func (m *SRDealDetail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SRDealDetail.Unmarshal(m, b)
}
func (m *SRDealDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SRDealDetail.Marshal(b, m, deterministic)
}
func (m *SRDealDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SRDealDetail.Merge(m, src)
}
func (m *SRDealDetail) XXX_Size() int {
	return xxx_messageInfo_SRDealDetail.Size(m)
}
func (m *SRDealDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_SRDealDetail.DiscardUnknown(m)
}

var xxx_messageInfo_SRDealDetail proto.InternalMessageInfo

func (m *SRDealDetail) GetChairID() int32 {
	if m != nil && m.ChairID != nil {
		return *m.ChairID
	}
	return 0
}

func (m *SRDealDetail) GetCardsHand() []int32 {
	if m != nil {
		return m.CardsHand
	}
	return nil
}

func (m *SRDealDetail) GetCardsFlower() []int32 {
	if m != nil {
		return m.CardsFlower
	}
	return nil
}

// 动作记录
type SRAction struct {
	Action  *int32 `protobuf:"varint,1,req,name=action" json:"action,omitempty"`
	ChairID *int32 `protobuf:"varint,2,req,name=chairID" json:"chairID,omitempty"`
	QaIndex *int32 `protobuf:"varint,3,req,name=qaIndex" json:"qaIndex,omitempty"`
	// 动作涉及到的牌列表，如果动作是发牌，列表包含花牌和非花牌；
	// 如果动作是出牌，则列表只有一个张牌；如果动作是吃椪杠、列表也只有一张牌，表示面子牌组的第一张牌
	// 对于吃牌，有两个card，一个是面子牌组的第一张牌，另一个是表示吃的哪张牌
	Cards                []int32  `protobuf:"varint,4,rep,name=cards" json:"cards,omitempty"`
	Flags                *int32   `protobuf:"varint,5,req,name=flags" json:"flags,omitempty"`
	CardHandType         *int32   `protobuf:"varint,6,opt,name=cardHandType" json:"cardHandType,omitempty"`
	AllowActions         *int32   `protobuf:"varint,7,opt,name=allowActions" json:"allowActions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SRAction) Reset()         { *m = SRAction{} }
func (m *SRAction) String() string { return proto.CompactTextString(m) }
func (*SRAction) ProtoMessage()    {}
func (*SRAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_0786ddba798afdac, []int{2}
}
func (m *SRAction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SRAction.Unmarshal(m, b)
}
func (m *SRAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SRAction.Marshal(b, m, deterministic)
}
func (m *SRAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SRAction.Merge(m, src)
}
func (m *SRAction) XXX_Size() int {
	return xxx_messageInfo_SRAction.Size(m)
}
func (m *SRAction) XXX_DiscardUnknown() {
	xxx_messageInfo_SRAction.DiscardUnknown(m)
}

var xxx_messageInfo_SRAction proto.InternalMessageInfo

func (m *SRAction) GetAction() int32 {
	if m != nil && m.Action != nil {
		return *m.Action
	}
	return 0
}

func (m *SRAction) GetChairID() int32 {
	if m != nil && m.ChairID != nil {
		return *m.ChairID
	}
	return 0
}

func (m *SRAction) GetQaIndex() int32 {
	if m != nil && m.QaIndex != nil {
		return *m.QaIndex
	}
	return 0
}

func (m *SRAction) GetCards() []int32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *SRAction) GetFlags() int32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

func (m *SRAction) GetCardHandType() int32 {
	if m != nil && m.CardHandType != nil {
		return *m.CardHandType
	}
	return 0
}

func (m *SRAction) GetAllowActions() int32 {
	if m != nil && m.AllowActions != nil {
		return *m.AllowActions
	}
	return 0
}

type SRMsgHandRecorderExtra struct {
	Markup               *int32   `protobuf:"varint,1,opt,name=markup" json:"markup,omitempty"`
	OwnerUserID          *string  `protobuf:"bytes,2,opt,name=ownerUserID" json:"ownerUserID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SRMsgHandRecorderExtra) Reset()         { *m = SRMsgHandRecorderExtra{} }
func (m *SRMsgHandRecorderExtra) String() string { return proto.CompactTextString(m) }
func (*SRMsgHandRecorderExtra) ProtoMessage()    {}
func (*SRMsgHandRecorderExtra) Descriptor() ([]byte, []int) {
	return fileDescriptor_0786ddba798afdac, []int{3}
}
func (m *SRMsgHandRecorderExtra) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SRMsgHandRecorderExtra.Unmarshal(m, b)
}
func (m *SRMsgHandRecorderExtra) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SRMsgHandRecorderExtra.Marshal(b, m, deterministic)
}
func (m *SRMsgHandRecorderExtra) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SRMsgHandRecorderExtra.Merge(m, src)
}
func (m *SRMsgHandRecorderExtra) XXX_Size() int {
	return xxx_messageInfo_SRMsgHandRecorderExtra.Size(m)
}
func (m *SRMsgHandRecorderExtra) XXX_DiscardUnknown() {
	xxx_messageInfo_SRMsgHandRecorderExtra.DiscardUnknown(m)
}

var xxx_messageInfo_SRMsgHandRecorderExtra proto.InternalMessageInfo

func (m *SRMsgHandRecorderExtra) GetMarkup() int32 {
	if m != nil && m.Markup != nil {
		return *m.Markup
	}
	return 0
}

func (m *SRMsgHandRecorderExtra) GetOwnerUserID() string {
	if m != nil && m.OwnerUserID != nil {
		return *m.OwnerUserID
	}
	return ""
}

// 一手牌记录器
// 消息用于客户端回播，以及bug定位等
// 用于记录发牌数据，以及听吃椪杠胡等动作
type SRMsgHandRecorder struct {
	BankerChairID        *int32                  `protobuf:"varint,1,req,name=bankerChairID" json:"bankerChairID,omitempty"`
	WindFlowerID         *int32                  `protobuf:"varint,2,req,name=windFlowerID" json:"windFlowerID,omitempty"`
	Players              []*SRMsgPlayerInfo      `protobuf:"bytes,3,rep,name=players" json:"players,omitempty"`
	IsHandOver           *bool                   `protobuf:"varint,4,req,name=isHandOver" json:"isHandOver,omitempty"`
	Deals                []*SRDealDetail         `protobuf:"bytes,5,rep,name=deals" json:"deals,omitempty"`
	Actions              []*SRAction             `protobuf:"bytes,6,rep,name=actions" json:"actions,omitempty"`
	HandScore            []byte                  `protobuf:"bytes,7,opt,name=handScore" json:"handScore,omitempty"`
	RoomConfigID         *string                 `protobuf:"bytes,8,opt,name=roomConfigID" json:"roomConfigID,omitempty"`
	StartTime            *uint32                 `protobuf:"varint,9,opt,name=startTime" json:"startTime,omitempty"`
	EndTime              *uint32                 `protobuf:"varint,10,opt,name=endTime" json:"endTime,omitempty"`
	HandNum              *int32                  `protobuf:"varint,11,opt,name=handNum" json:"handNum,omitempty"`
	IsContinuousBanker   *bool                   `protobuf:"varint,12,opt,name=isContinuousBanker" json:"isContinuousBanker,omitempty"`
	RoomNumber           *string                 `protobuf:"bytes,13,opt,name=roomNumber" json:"roomNumber,omitempty"`
	RoomType             *int32                  `protobuf:"varint,14,opt,name=roomType" json:"roomType,omitempty"`
	Extra                *SRMsgHandRecorderExtra `protobuf:"bytes,15,opt,name=extra" json:"extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *SRMsgHandRecorder) Reset()         { *m = SRMsgHandRecorder{} }
func (m *SRMsgHandRecorder) String() string { return proto.CompactTextString(m) }
func (*SRMsgHandRecorder) ProtoMessage()    {}
func (*SRMsgHandRecorder) Descriptor() ([]byte, []int) {
	return fileDescriptor_0786ddba798afdac, []int{4}
}
func (m *SRMsgHandRecorder) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SRMsgHandRecorder.Unmarshal(m, b)
}
func (m *SRMsgHandRecorder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SRMsgHandRecorder.Marshal(b, m, deterministic)
}
func (m *SRMsgHandRecorder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SRMsgHandRecorder.Merge(m, src)
}
func (m *SRMsgHandRecorder) XXX_Size() int {
	return xxx_messageInfo_SRMsgHandRecorder.Size(m)
}
func (m *SRMsgHandRecorder) XXX_DiscardUnknown() {
	xxx_messageInfo_SRMsgHandRecorder.DiscardUnknown(m)
}

var xxx_messageInfo_SRMsgHandRecorder proto.InternalMessageInfo

func (m *SRMsgHandRecorder) GetBankerChairID() int32 {
	if m != nil && m.BankerChairID != nil {
		return *m.BankerChairID
	}
	return 0
}

func (m *SRMsgHandRecorder) GetWindFlowerID() int32 {
	if m != nil && m.WindFlowerID != nil {
		return *m.WindFlowerID
	}
	return 0
}

func (m *SRMsgHandRecorder) GetPlayers() []*SRMsgPlayerInfo {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *SRMsgHandRecorder) GetIsHandOver() bool {
	if m != nil && m.IsHandOver != nil {
		return *m.IsHandOver
	}
	return false
}

func (m *SRMsgHandRecorder) GetDeals() []*SRDealDetail {
	if m != nil {
		return m.Deals
	}
	return nil
}

func (m *SRMsgHandRecorder) GetActions() []*SRAction {
	if m != nil {
		return m.Actions
	}
	return nil
}

func (m *SRMsgHandRecorder) GetHandScore() []byte {
	if m != nil {
		return m.HandScore
	}
	return nil
}

func (m *SRMsgHandRecorder) GetRoomConfigID() string {
	if m != nil && m.RoomConfigID != nil {
		return *m.RoomConfigID
	}
	return ""
}

func (m *SRMsgHandRecorder) GetStartTime() uint32 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *SRMsgHandRecorder) GetEndTime() uint32 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *SRMsgHandRecorder) GetHandNum() int32 {
	if m != nil && m.HandNum != nil {
		return *m.HandNum
	}
	return 0
}

func (m *SRMsgHandRecorder) GetIsContinuousBanker() bool {
	if m != nil && m.IsContinuousBanker != nil {
		return *m.IsContinuousBanker
	}
	return false
}

func (m *SRMsgHandRecorder) GetRoomNumber() string {
	if m != nil && m.RoomNumber != nil {
		return *m.RoomNumber
	}
	return ""
}

func (m *SRMsgHandRecorder) GetRoomType() int32 {
	if m != nil && m.RoomType != nil {
		return *m.RoomType
	}
	return 0
}

func (m *SRMsgHandRecorder) GetExtra() *SRMsgHandRecorderExtra {
	if m != nil {
		return m.Extra
	}
	return nil
}

func init() {
	proto.RegisterType((*SRMsgPlayerInfo)(nil), "pokerface.SRMsgPlayerInfo")
	proto.RegisterType((*SRDealDetail)(nil), "pokerface.SRDealDetail")
	proto.RegisterType((*SRAction)(nil), "pokerface.SRAction")
	proto.RegisterType((*SRMsgHandRecorderExtra)(nil), "pokerface.SRMsgHandRecorderExtra")
	proto.RegisterType((*SRMsgHandRecorder)(nil), "pokerface.SRMsgHandRecorder")
	proto.RegisterEnum("pokerface.SRFlags", SRFlags_name, SRFlags_value)
}

func init() { proto.RegisterFile("game_pokerface_s2s.proto", fileDescriptor_0786ddba798afdac) }

var fileDescriptor_0786ddba798afdac = []byte{
	// 567 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x53, 0x41, 0x6f, 0xda, 0x4c,
	0x10, 0xfd, 0x6c, 0x30, 0xc6, 0x03, 0x04, 0x58, 0xf2, 0xb5, 0xab, 0x9c, 0x5c, 0x54, 0x55, 0x56,
	0x2b, 0x45, 0x55, 0xee, 0x3d, 0xb4, 0xa1, 0x49, 0x39, 0x34, 0xa9, 0x4c, 0x72, 0x8e, 0x36, 0xf6,
	0x00, 0x2b, 0xcc, 0x2e, 0x5d, 0x9b, 0x10, 0xfe, 0x40, 0xff, 0x47, 0xff, 0x69, 0x35, 0x43, 0x12,
	0x25, 0xe1, 0x06, 0x6f, 0x67, 0xde, 0xbc, 0x79, 0x6f, 0x0c, 0x72, 0xa6, 0x96, 0x78, 0xb3, 0xb2,
	0x0b, 0x74, 0x53, 0x95, 0xe1, 0x4d, 0x79, 0x52, 0x1e, 0xaf, 0x9c, 0xad, 0xac, 0x88, 0x9e, 0xc0,
	0xe1, 0x06, 0xba, 0x93, 0xf4, 0x67, 0x39, 0xfb, 0x55, 0xa8, 0x2d, 0xba, 0xb1, 0x99, 0x5a, 0x71,
	0x00, 0x8d, 0x75, 0x89, 0x6e, 0x3c, 0x92, 0x5e, 0xec, 0x27, 0x91, 0xe8, 0x42, 0x98, 0xcd, 0x95,
	0x26, 0xc0, 0x8f, 0xfd, 0x24, 0x10, 0x6d, 0xa8, 0x1b, 0x9d, 0x2d, 0x64, 0x2d, 0xf6, 0x92, 0x88,
	0xca, 0x67, 0x68, 0x72, 0x74, 0xb2, 0x1e, 0x7b, 0x49, 0x47, 0x0c, 0xa0, 0x35, 0x47, 0x95, 0x8f,
	0x33, 0x6b, 0xae, 0xd3, 0xb1, 0x0c, 0xb8, 0xa8, 0x07, 0x4d, 0x75, 0xa7, 0x2a, 0x45, 0x24, 0x8d,
	0xd8, 0x4b, 0x82, 0xe1, 0x39, 0xb4, 0x27, 0xe9, 0x08, 0x55, 0x31, 0xc2, 0x4a, 0xe9, 0xe2, 0xf9,
	0x14, 0x8f, 0xa7, 0xf4, 0x21, 0xca, 0x94, 0xcb, 0xcb, 0x1f, 0xca, 0xe4, 0xd2, 0x8f, 0x6b, 0x49,
	0x40, 0xd4, 0x0c, 0x9d, 0x15, 0x76, 0x83, 0x4e, 0xd6, 0x08, 0x1c, 0xfe, 0xf1, 0xa0, 0x39, 0x49,
	0xbf, 0x66, 0x95, 0xb6, 0x86, 0xc4, 0x28, 0xfe, 0xf5, 0x40, 0xb2, 0xa7, 0xbd, 0x0b, 0xe1, 0x6f,
	0x35, 0x36, 0x39, 0xde, 0xcb, 0x1a, 0x03, 0x1d, 0x08, 0x98, 0x53, 0xd6, 0x79, 0x44, 0x07, 0x82,
	0x69, 0xa1, 0x66, 0xa5, 0x0c, 0xf8, 0xf5, 0x10, 0xda, 0xf4, 0x4a, 0x1a, 0xae, 0xb6, 0x2b, 0xdc,
	0x69, 0x27, 0x54, 0x15, 0x85, 0xdd, 0xec, 0x86, 0x96, 0x32, 0xe4, 0x8d, 0xbe, 0xc0, 0x1b, 0xb6,
	0x92, 0x8a, 0x53, 0xcc, 0xac, 0xcb, 0xd1, 0x7d, 0xbf, 0xaf, 0x9c, 0x22, 0x55, 0x4b, 0xe5, 0x16,
	0xeb, 0x95, 0xf4, 0xb8, 0x7f, 0x00, 0x2d, 0xbb, 0x31, 0xe8, 0xae, 0x77, 0x36, 0xfb, 0x64, 0xd1,
	0xf0, 0x6f, 0x0d, 0xfa, 0x7b, 0xfd, 0xe2, 0x7f, 0xe8, 0xdc, 0x2a, 0xb3, 0x40, 0x77, 0xfa, 0xc2,
	0x9c, 0x43, 0x68, 0x6f, 0xb4, 0xc9, 0x77, 0x46, 0x3c, 0x2d, 0xf7, 0x09, 0xc2, 0x15, 0xe7, 0x58,
	0xb2, 0x37, 0xad, 0x93, 0xa3, 0xe3, 0xa7, 0xa4, 0x8f, 0x5f, 0xc7, 0x2c, 0x00, 0x34, 0x9b, 0x7b,
	0x79, 0xc7, 0xd9, 0xf9, 0x49, 0x53, 0x7c, 0x80, 0x20, 0x47, 0x55, 0xd0, 0xf6, 0xd4, 0xfe, 0xf6,
	0x45, 0xfb, 0xb3, 0xb0, 0xde, 0x43, 0xa8, 0x1e, 0x76, 0x6f, 0x70, 0xe5, 0xe0, 0x45, 0xe5, 0x43,
	0x18, 0x7d, 0x88, 0xe6, 0xca, 0xe4, 0x93, 0xcc, 0x3a, 0x64, 0x8f, 0xda, 0xa4, 0xdb, 0x59, 0xbb,
	0x3c, 0xb5, 0x66, 0xaa, 0x67, 0xe3, 0x91, 0x6c, 0xf2, 0x75, 0xf4, 0x21, 0x2a, 0x2b, 0xe5, 0xaa,
	0x2b, 0xbd, 0x44, 0x19, 0xf1, 0x15, 0x75, 0x21, 0x44, 0x93, 0x33, 0x00, 0x8f, 0x00, 0x91, 0x5d,
	0xac, 0x97, 0xb2, 0xc5, 0x26, 0x1e, 0x81, 0xd0, 0xe5, 0xa9, 0x35, 0x95, 0x36, 0x6b, 0xbb, 0x2e,
	0xbf, 0xb1, 0x4b, 0xb2, 0x1d, 0x7b, 0x49, 0x93, 0x76, 0xa3, 0x31, 0x17, 0xeb, 0xe5, 0x2d, 0x3a,
	0xd9, 0x79, 0x3c, 0x41, 0xc2, 0x38, 0xc6, 0x03, 0x66, 0xf8, 0x0c, 0x01, 0x52, 0x3e, 0xb2, 0x1b,
	0x7b, 0x49, 0xeb, 0xe4, 0xdd, 0x6b, 0xb3, 0xf6, 0x82, 0xfc, 0x78, 0x0e, 0xe1, 0x24, 0x3d, 0xa3,
	0xfb, 0x10, 0x00, 0x8d, 0x49, 0x7a, 0x61, 0x0d, 0xf6, 0xfe, 0x13, 0x03, 0xfa, 0x88, 0x28, 0xcc,
	0x14, 0x57, 0xc5, 0xf6, 0xd2, 0x14, 0xdb, 0x9e, 0x27, 0x5a, 0x54, 0x9b, 0xea, 0x6c, 0xae, 0x7b,
	0xbe, 0x38, 0x00, 0xa0, 0xc6, 0xed, 0xee, 0x7f, 0xfd, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x33,
	0x01, 0x6e, 0x32, 0x9c, 0x03, 0x00, 0x00,
}
