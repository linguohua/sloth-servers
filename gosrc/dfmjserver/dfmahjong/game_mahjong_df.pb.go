// Code generated by protoc-gen-go. DO NOT EDIT.
// source: game_mahjong_df.proto

package dfmahjong

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 大胡
// 大胡类型，一手牌可以有多种大胡类型
type GreatWinType int32

const (
	GreatWinType_enumGreatWinType_None                     GreatWinType = 0
	GreatWinType_enumGreatWinType_ChowPongKong             GreatWinType = 1
	GreatWinType_enumGreatWinType_FinalDraw                GreatWinType = 2
	GreatWinType_enumGreatWinType_PongKong                 GreatWinType = 4
	GreatWinType_enumGreatWinType_PureSame                 GreatWinType = 8
	GreatWinType_enumGreatWinType_MixedSame                GreatWinType = 16
	GreatWinType_enumGreatWinType_ClearFront               GreatWinType = 32
	GreatWinType_enumGreatWinType_SevenPair                GreatWinType = 64
	GreatWinType_enumGreatWinType_GreatSevenPair           GreatWinType = 128
	GreatWinType_enumGreatWinType_Heaven                   GreatWinType = 256
	GreatWinType_enumGreatWinType_AfterConcealedKong       GreatWinType = 512
	GreatWinType_enumGreatWinType_AfterExposedKong         GreatWinType = 1024
	GreatWinType_enumGreatWinType_Richi                    GreatWinType = 2048
	GreatWinType_enumGreatWinType_PongKongWithFlowerNoMeld GreatWinType = 4096
	GreatWinType_enumGreatWinType_PureSameWithFlowerNoMeld GreatWinType = 8192
	GreatWinType_enumGreatWinType_MixSameWithFlowerNoMeld  GreatWinType = 16384
	GreatWinType_enumGreatWinType_PureSameWithMeld         GreatWinType = 32768
	GreatWinType_enumGreatWinType_MixSameWithMeld          GreatWinType = 65536
	GreatWinType_enumGreatWinType_RobKong                  GreatWinType = 131072
	GreatWinType_enumGreatWinType_OpponentsRichi           GreatWinType = 262144
)

var GreatWinType_name = map[int32]string{
	0:      "enumGreatWinType_None",
	1:      "enumGreatWinType_ChowPongKong",
	2:      "enumGreatWinType_FinalDraw",
	4:      "enumGreatWinType_PongKong",
	8:      "enumGreatWinType_PureSame",
	16:     "enumGreatWinType_MixedSame",
	32:     "enumGreatWinType_ClearFront",
	64:     "enumGreatWinType_SevenPair",
	128:    "enumGreatWinType_GreatSevenPair",
	256:    "enumGreatWinType_Heaven",
	512:    "enumGreatWinType_AfterConcealedKong",
	1024:   "enumGreatWinType_AfterExposedKong",
	2048:   "enumGreatWinType_Richi",
	4096:   "enumGreatWinType_PongKongWithFlowerNoMeld",
	8192:   "enumGreatWinType_PureSameWithFlowerNoMeld",
	16384:  "enumGreatWinType_MixSameWithFlowerNoMeld",
	32768:  "enumGreatWinType_PureSameWithMeld",
	65536:  "enumGreatWinType_MixSameWithMeld",
	131072: "enumGreatWinType_RobKong",
	262144: "enumGreatWinType_OpponentsRichi",
}

var GreatWinType_value = map[string]int32{
	"enumGreatWinType_None":                     0,
	"enumGreatWinType_ChowPongKong":             1,
	"enumGreatWinType_FinalDraw":                2,
	"enumGreatWinType_PongKong":                 4,
	"enumGreatWinType_PureSame":                 8,
	"enumGreatWinType_MixedSame":                16,
	"enumGreatWinType_ClearFront":               32,
	"enumGreatWinType_SevenPair":                64,
	"enumGreatWinType_GreatSevenPair":           128,
	"enumGreatWinType_Heaven":                   256,
	"enumGreatWinType_AfterConcealedKong":       512,
	"enumGreatWinType_AfterExposedKong":         1024,
	"enumGreatWinType_Richi":                    2048,
	"enumGreatWinType_PongKongWithFlowerNoMeld": 4096,
	"enumGreatWinType_PureSameWithFlowerNoMeld": 8192,
	"enumGreatWinType_MixSameWithFlowerNoMeld":  16384,
	"enumGreatWinType_PureSameWithMeld":         32768,
	"enumGreatWinType_MixSameWithMeld":          65536,
	"enumGreatWinType_RobKong":                  131072,
	"enumGreatWinType_OpponentsRichi":           262144,
}

func (x GreatWinType) Enum() *GreatWinType {
	p := new(GreatWinType)
	*p = x
	return p
}

func (x GreatWinType) String() string {
	return proto.EnumName(GreatWinType_name, int32(x))
}

func (x *GreatWinType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GreatWinType_value, data, "GreatWinType")
	if err != nil {
		return err
	}
	*x = GreatWinType(value)
	return nil
}

func (GreatWinType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_808dfe8173d1b9cc, []int{0}
}

// 小胡
// 小胡类型，一手牌可以有多种小胡类型
type MiniWinType int32

const (
	MiniWinType_enumMiniWinType_None              MiniWinType = 0
	MiniWinType_enumMiniWinType_Continuous_Banker MiniWinType = 1
	MiniWinType_enumMiniWinType_SelfDraw          MiniWinType = 2
	MiniWinType_enumMiniWinType_NoFlowers         MiniWinType = 4
	MiniWinType_enumMiniWinType_Kong2Discard      MiniWinType = 8
	MiniWinType_enumMiniWinType_Kong2SelfDraw     MiniWinType = 16
	MiniWinType_enumMiniWinType_SecondFrontClear  MiniWinType = 32
	MiniWinType_enumMiniWinType_PongSelfDrawn     MiniWinType = 64
	MiniWinType_enumMiniWinType_ChowPongkong      MiniWinType = 128
	MiniWinType_enumMiniWinType_Richi             MiniWinType = 256
	MiniWinType_enumMiniWinType_SevenPair         MiniWinType = 512
	MiniWinType_enumMiniWinType_PureSameWithMeld  MiniWinType = 1024
	MiniWinType_enumMiniWinType_MixSameWithMeld   MiniWinType = 2048
)

var MiniWinType_name = map[int32]string{
	0:    "enumMiniWinType_None",
	1:    "enumMiniWinType_Continuous_Banker",
	2:    "enumMiniWinType_SelfDraw",
	4:    "enumMiniWinType_NoFlowers",
	8:    "enumMiniWinType_Kong2Discard",
	16:   "enumMiniWinType_Kong2SelfDraw",
	32:   "enumMiniWinType_SecondFrontClear",
	64:   "enumMiniWinType_PongSelfDrawn",
	128:  "enumMiniWinType_ChowPongkong",
	256:  "enumMiniWinType_Richi",
	512:  "enumMiniWinType_SevenPair",
	1024: "enumMiniWinType_PureSameWithMeld",
	2048: "enumMiniWinType_MixSameWithMeld",
}

var MiniWinType_value = map[string]int32{
	"enumMiniWinType_None":              0,
	"enumMiniWinType_Continuous_Banker": 1,
	"enumMiniWinType_SelfDraw":          2,
	"enumMiniWinType_NoFlowers":         4,
	"enumMiniWinType_Kong2Discard":      8,
	"enumMiniWinType_Kong2SelfDraw":     16,
	"enumMiniWinType_SecondFrontClear":  32,
	"enumMiniWinType_PongSelfDrawn":     64,
	"enumMiniWinType_ChowPongkong":      128,
	"enumMiniWinType_Richi":             256,
	"enumMiniWinType_SevenPair":         512,
	"enumMiniWinType_PureSameWithMeld":  1024,
	"enumMiniWinType_MixSameWithMeld":   2048,
}

func (x MiniWinType) Enum() *MiniWinType {
	p := new(MiniWinType)
	*p = x
	return p
}

func (x MiniWinType) String() string {
	return proto.EnumName(MiniWinType_name, int32(x))
}

func (x *MiniWinType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MiniWinType_value, data, "MiniWinType")
	if err != nil {
		return err
	}
	*x = MiniWinType(value)
	return nil
}

func (MiniWinType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_808dfe8173d1b9cc, []int{1}
}

func init() {
	proto.RegisterEnum("dfmahjong.GreatWinType", GreatWinType_name, GreatWinType_value)
	proto.RegisterEnum("dfmahjong.MiniWinType", MiniWinType_name, MiniWinType_value)
}

func init() { proto.RegisterFile("game_mahjong_df.proto", fileDescriptor_808dfe8173d1b9cc) }

var fileDescriptor_808dfe8173d1b9cc = []byte{
	// 479 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x49, 0x30, 0x92, 0x59, 0x38, 0x8c, 0x46, 0x14, 0xd2, 0x7f, 0xa9, 0x23, 0x9a, 0x52,
	0x7a, 0xc8, 0x81, 0x27, 0x08, 0xa4, 0x04, 0x24, 0x94, 0x52, 0x11, 0xa4, 0x1e, 0xa3, 0x25, 0x9e,
	0x24, 0x4b, 0x9d, 0x59, 0x6b, 0xed, 0x34, 0xe5, 0xe6, 0x97, 0xe3, 0x55, 0x78, 0x0e, 0x14, 0xff,
	0x29, 0x4e, 0x77, 0xe9, 0xd1, 0xfb, 0xfd, 0x76, 0x3c, 0xf3, 0xf9, 0x1b, 0x8b, 0x9d, 0xb9, 0x5c,
	0xd2, 0x64, 0x29, 0x17, 0x3f, 0x35, 0xcf, 0x27, 0xe1, 0xac, 0x17, 0x1b, 0x9d, 0x6a, 0x7c, 0x1a,
	0xce, 0xca, 0xb3, 0xb3, 0x3f, 0x4f, 0xc4, 0xf3, 0x4f, 0x86, 0x64, 0x7a, 0xa5, 0xf8, 0xfb, 0xaf,
	0x98, 0x70, 0x57, 0xec, 0x10, 0xaf, 0x96, 0xf5, 0xb3, 0xc9, 0x85, 0x66, 0x82, 0x47, 0xd8, 0x11,
	0x87, 0x96, 0x34, 0x58, 0xe8, 0xf5, 0xa5, 0xe6, 0xf9, 0x17, 0xcd, 0x73, 0x68, 0x60, 0x5b, 0xec,
	0x59, 0xc8, 0x50, 0xb1, 0x8c, 0xce, 0x8d, 0x5c, 0x43, 0x13, 0x0f, 0xc5, 0xae, 0xa5, 0xdf, 0x5d,
	0xf7, 0xdc, 0xf2, 0xca, 0xd0, 0x58, 0x2e, 0x09, 0x7c, 0x67, 0xf5, 0x91, 0xba, 0xa5, 0x30, 0xd7,
	0x01, 0x8f, 0xc4, 0xbe, 0xdd, 0x60, 0x44, 0xd2, 0x0c, 0x8d, 0xe6, 0x14, 0x02, 0x67, 0x81, 0x31,
	0xdd, 0x10, 0x5f, 0x4a, 0x65, 0xa0, 0x8f, 0xc7, 0xe2, 0xc8, 0xd2, 0xf3, 0x87, 0x7f, 0x50, 0xd6,
	0xc0, 0x03, 0xf1, 0xca, 0xa2, 0x3e, 0x93, 0xbc, 0x21, 0x86, 0xac, 0x89, 0xa7, 0xe2, 0xb5, 0xa5,
	0xbe, 0x9f, 0xa5, 0x64, 0x06, 0x9a, 0xa7, 0x24, 0x23, 0x0a, 0xf3, 0x61, 0x33, 0x0f, 0x4f, 0x44,
	0xc7, 0x4d, 0x7e, 0xbc, 0x8d, 0x75, 0x52, 0x71, 0x3e, 0xee, 0x8b, 0x97, 0x16, 0xf7, 0x4d, 0x4d,
	0x17, 0x0a, 0x32, 0xc0, 0x9e, 0x78, 0xfb, 0x5f, 0x47, 0xaf, 0x54, 0xba, 0x18, 0x46, 0x7a, 0x4d,
	0xe6, 0x42, 0x8f, 0x28, 0x0a, 0x21, 0x0b, 0xdc, 0x7c, 0x69, 0xb1, 0xcd, 0xf7, 0xb1, 0x27, 0x4e,
	0x5d, 0x9e, 0xbb, 0xf1, 0xac, 0x81, 0x6f, 0x1c, 0x43, 0xd5, 0xeb, 0x97, 0x60, 0x13, 0x4f, 0x44,
	0xf0, 0x50, 0xe1, 0x92, 0xf3, 0xb0, 0x2d, 0x5a, 0xf6, 0xf4, 0xfa, 0x47, 0x61, 0x4e, 0xe6, 0x63,
	0xd7, 0xf1, 0xcd, 0xbe, 0xc6, 0xb1, 0x66, 0xe2, 0x34, 0x29, 0x6d, 0xca, 0xe0, 0xec, 0xf7, 0x63,
	0xf1, 0x6c, 0xa4, 0x58, 0x55, 0x39, 0x6f, 0x89, 0x17, 0x9b, 0x6b, 0xb5, 0xa3, 0x2a, 0xe6, 0xdd,
	0x62, 0x82, 0xba, 0x32, 0xd0, 0x9c, 0x2a, 0x5e, 0xe9, 0x55, 0x32, 0xf9, 0x20, 0xf9, 0x9a, 0x0c,
	0x6c, 0x52, 0xd0, 0xba, 0x8f, 0x8d, 0x29, 0x9a, 0x6d, 0x07, 0x7d, 0xbb, 0x7c, 0x61, 0x56, 0x02,
	0x1e, 0x06, 0xe2, 0xe0, 0xbe, 0xbc, 0x19, 0xe8, 0xdd, 0xb9, 0x4a, 0xa6, 0xd2, 0x84, 0xe0, 0x57,
	0xcb, 0x66, 0x11, 0x77, 0xef, 0x00, 0x3c, 0x2e, 0x1c, 0xdc, 0xee, 0x60, 0xaa, 0x39, 0xcc, 0xe3,
	0x9e, 0x07, 0x1f, 0x02, 0x57, 0xa1, 0x4d, 0x3e, 0xaa, 0x3a, 0x0c, 0x7d, 0xec, 0xd8, 0xdd, 0x54,
	0x7b, 0x7d, 0x9d, 0xdb, 0xdc, 0xc0, 0xbd, 0xe2, 0xb7, 0x50, 0x47, 0x4a, 0x6f, 0x9b, 0xd8, 0xb6,
	0x67, 0xad, 0xed, 0x8b, 0x87, 0x5d, 0xbb, 0x4f, 0x3b, 0x11, 0x7e, 0xb5, 0x7c, 0x75, 0xcc, 0xca,
	0x03, 0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x5a, 0x9d, 0xf7, 0xba, 0xd3, 0x04, 0x00, 0x00,
}
